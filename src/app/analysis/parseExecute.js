/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parseExecute = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,43],$V2=[1,27],$V3=[1,44],$V4=[1,58],$V5=[1,54],$V6=[1,45],$V7=[1,46],$V8=[1,49],$V9=[1,50],$Va=[1,51],$Vb=[1,52],$Vc=[1,29],$Vd=[1,59],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,34],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,57],$Vp=[2,5,30,31,33,38,50,64,66,70,71,72,73,78,79,81,83,86,89,90,91,92,93,99,101,102,103,104,111],$Vq=[48,49,53,54,55,56,57,58,60,61,62,63,64,65,75,76,77,98],$Vr=[2,68],$Vs=[2,69],$Vt=[2,71],$Vu=[2,131],$Vv=[2,73],$Vw=[1,66],$Vx=[1,68],$Vy=[1,67],$Vz=[2,51],$VA=[16,34,36,39,47,48,49,53,54,55,56,57,58,67,77,81,98],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[1,76],$VI=[1,77],$VJ=[1,95],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,96],$VO=[1,104],$VP=[16,34,36,39,47,48,49,53,54,55,56,57,58,60,61,62,63,64,65,67,75,76,77,81,98],$VQ=[16,34,36,39,47,48,49,67,77,81,98],$VR=[1,110],$VS=[1,111],$VT=[1,112],$VU=[1,113],$VV=[1,162],$VW=[2,175],$VX=[47,67],$VY=[1,166],$VZ=[1,167],$V_=[1,169],$V$=[16,34,36,39,47,48,49,53,54,55,56,57,58,64,65,67,77,81,98],$V01=[16,34,36,39,47,48,49,67,77,81],$V11=[1,180],$V21=[39,47,67],$V31=[31,38,50,64,66,70,71,72,73,79],$V41=[16,34,36,39,47,48,49,53,54,55,56,57,58,61,62,63,64,65,67,77,81,98],$V51=[1,214],$V61=[1,210],$V71=[1,211],$V81=[1,212],$V91=[1,213],$Va1=[16,34,36,39,47,48,49,57,58,67,77,81,98],$Vb1=[1,229],$Vc1=[1,231],$Vd1=[96,97],$Ve1=[16,34,38,47,67,79,81,96,97],$Vf1=[1,261],$Vg1=[1,263],$Vh1=[1,265],$Vi1=[47,81],$Vj1=[16,47,81],$Vk1=[1,278],$Vl1=[1,279],$Vm1=[2,5,30,31,33,38,50,64,66,70,71,72,73,78,79,81,83,85,86,89,90,91,92,93,99,101,102,103,104,111],$Vn1=[81,89,90],$Vo1=[60,61,62,63,64,65,75,76],$Vp1=[1,341],$Vq1=[1,340],$Vr1=[1,344];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"LSENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,"ASSIGNMENT":8,"TYPE_DECLARATION":9,"STATEMENT_IF":10,"STATEMENT_SWITCH":11,"STATEMENT_WHILE":12,"DO_WHILE":13,"STATEMENT_FOR":14,"INCREMENT":15,"SEMICOLON":16,"DECREMENT":17,"FOR_IN":18,"FOR_OF":19,"FUNCTION_CALL":20,"PRINT":21,"GRAPH_TS":22,"STATEMENT_BREAK":23,"STATEMENT_CONTINUE":24,"STATEMENT_RETURN":25,"ARRAY_FUNCTIONS":26,"FUNCTIONS":27,"VARLET":28,"VARCONST":29,"LET":30,"IDENTIFIER":31,"ENDLET":32,"CONST":33,"EQUAL":34,"EXPL":35,"COLON":36,"DATATYPE":37,"LBRACKET":38,"RBRACKET":39,"ENDDECLARATION":40,"TSTRING":41,"TBOOLEAN":42,"TNUMBER":43,"TVOID":44,"PROPERTY_ACCESS":45,"LEXPL":46,"COMMA":47,"OR":48,"AND":49,"NOT":50,"TERNARY":51,"EXPR":52,"LESSTHAN":53,"GREATERTHAN":54,"LESSTHANOREQUALTO":55,"GREATERTHANOREQUALTO":56,"JUSTAS":57,"OTHERTHAN":58,"EXP":59,"POW":60,"MODULUSSIGN":61,"DIVISIONSIGN":62,"PORSIGN":63,"MINUSSIGN":64,"PLUSSIGN":65,"LPAREN":66,"RPAREN":67,"ARRAY_ACCESS":68,"ARRAY":69,"CHAIN":70,"NUMBER":71,"BOOLEAN":72,"NULL":73,"DEFINITION":74,"INCREMENTSIGN":75,"DECREMENTSIGN":76,"QUESTIONINGSIGN":77,"TYPE":78,"LBRACE":79,"LPARAMETERS":80,"RBRACE":81,"PARAMETERS":82,"IF":83,"BODY_IF":84,"ELSE":85,"SWITCH":86,"LCASES":87,"CASES":88,"CASE":89,"DEFAULT":90,"WHILE":91,"DO":92,"FOR":93,"FOR_PARAMETER1":94,"FOR_IN_P1":95,"IN":96,"OF":97,"POINT":98,"CONSOLE":99,"LOG":100,"GRAPH":101,"BREAK":102,"CONTINUE":103,"RETURN":104,"LVALUES":105,"PUSH":106,"POP":107,"LENGTH":108,"FUNCTIONS_DEFINITIONS":109,"FUNCTION_NT2":110,"FUNCTION":111,"FUNCTION_NT3":112,"LPARAMETERS_DES":113,"FUNCTION_NT7":114,"FUNCTION_NT10":115,"FUNCTION_NT9":116,"FUNCTION_NT12":117,"FUNCTION_NT11":118,"FUNCTION_NT4":119,"FUNCTION_NT5":120,"FUNCTION_NT6":121,"FUNCTION_NT8":122,"PARAMETER_DES":123,"LPARAMETERS_DES_R":124,"PARAMETER_DES_N1":125,"PARAMETER_DES_N2":126,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SEMICOLON",30:"LET",31:"IDENTIFIER",33:"CONST",34:"EQUAL",36:"COLON",38:"LBRACKET",39:"RBRACKET",41:"TSTRING",42:"TBOOLEAN",43:"TNUMBER",44:"TVOID",47:"COMMA",48:"OR",49:"AND",50:"NOT",53:"LESSTHAN",54:"GREATERTHAN",55:"LESSTHANOREQUALTO",56:"GREATERTHANOREQUALTO",57:"JUSTAS",58:"OTHERTHAN",60:"POW",61:"MODULUSSIGN",62:"DIVISIONSIGN",63:"PORSIGN",64:"MINUSSIGN",65:"PLUSSIGN",66:"LPAREN",67:"RPAREN",70:"CHAIN",71:"NUMBER",72:"BOOLEAN",73:"NULL",75:"INCREMENTSIGN",76:"DECREMENTSIGN",77:"QUESTIONINGSIGN",78:"TYPE",79:"LBRACE",81:"RBRACE",83:"IF",85:"ELSE",86:"SWITCH",89:"CASE",90:"DEFAULT",91:"WHILE",92:"DO",93:"FOR",96:"IN",97:"OF",98:"POINT",99:"CONSOLE",100:"LOG",101:"GRAPH",102:"BREAK",103:"CONTINUE",104:"RETURN",106:"PUSH",107:"POP",108:"LENGTH",111:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[7,1],[7,1],[28,3],[29,5],[29,7],[29,9],[32,1],[32,3],[32,3],[37,1],[37,1],[37,1],[37,1],[37,1],[40,1],[40,5],[40,3],[40,3],[8,4],[8,4],[46,3],[46,1],[35,3],[35,3],[35,2],[35,1],[35,1],[35,1],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,1],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,2],[59,3],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[15,2],[17,2],[51,5],[9,6],[9,7],[9,7],[80,3],[80,3],[80,1],[82,3],[82,5],[82,1],[10,5],[10,7],[10,7],[84,2],[84,3],[11,6],[11,7],[87,2],[87,1],[88,3],[88,4],[88,2],[88,3],[12,6],[12,7],[13,8],[13,9],[14,9],[14,9],[14,10],[14,10],[94,1],[94,1],[18,9],[18,9],[18,8],[18,8],[95,2],[95,4],[95,6],[95,2],[95,4],[95,6],[19,8],[19,8],[19,9],[19,9],[68,4],[20,3],[20,4],[45,1],[45,3],[21,7],[21,6],[22,4],[23,2],[24,2],[25,2],[25,3],[74,3],[74,2],[105,5],[105,3],[69,2],[69,3],[26,6],[26,5],[26,3],[27,2],[109,3],[110,2],[110,3],[114,3],[114,2],[115,4],[115,2],[118,1],[118,2],[117,1],[117,2],[116,1],[116,2],[112,2],[112,3],[119,1],[119,2],[120,2],[120,4],[121,1],[121,2],[122,1],[122,2],[113,2],[124,3],[124,0],[123,2],[125,3],[125,0],[126,2],[126,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2:
 if($$[$0]){ $$[$0-1].addChild($$[$0]); $$[$0-1].traduction += `\n${$$[$0].traduction}`; if($$[$0].her != undefined){ $$[$0-1].her += `\n${$$[$0].her}`; } } this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = new ParseNode(null, null, 'SENTENCES', 'SENTENCES', null, null, null, '', null, ''); if($$[$0]){ this.$.addChild($$[$0]); this.$.traduction = $$[$0].traduction; if($$[$0].her != undefined){ this.$.her = $$[$0].her; } } 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 14: case 15: case 17: case 18: case 19: case 20: case 21: case 25: case 26: case 38: case 50: case 51: case 52: case 59: case 68: case 69: case 70: case 72: case 78: case 112: case 113: case 131: case 176: case 177:
 this.$ = $$[$0]; 
break;
case 12: case 13:
 $$[$0-1].traduction += ';'; this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = $$[$0-1]; this.$.traduction += ';'; AddFunctionNodes($$[$0-1]); 
break;
case 22:
 this.$.traduction += ';'; this.$ = $$[$0-1]; 
break;
case 23:
 if(her.length > 0){ errors.push(new ErrorClass(util.literal.errorType.FATAL, 'Funci√≥n anidada', $$[$0].row, $$[$0].column)); }else{ this.$ = $$[$0]; } 
break;
case 24:
 if(yytext != ';'){ errors.push(new ErrorClass(util.literal.errorType.SYNTACTIC, `Error de sintaxis '${yytext}'`, this._$.first_line, this._$.first_column)); } this.$ = null; 
break;
case 27:
 
        if($$[$0] != null){
            if($$[$0].value != null){
                if(Array.isArray($$[$0].value)){
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic, `let ${$$[$0-1]}${$$[$0].traduction}`, $$[$0].array);
                    this.$.childs = $$[$0].value;
                }else{
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic, `let ${$$[$0-1]}${$$[$0].traduction}`, $$[$0].array);
                    this.$.addChild($$[$0].value);
                }
            }else{
                this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic, `let ${$$[$0-1]}${$$[$0].traduction}`, $$[$0].array);
            } 
        }else{
            this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], util.literal.dataTypes.ANY, false, true, `let ${$$[$0-1]};`);
        } 
    
break;
case 28:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-3], util.literal.dataTypes.ANY, true, null, `const ${$$[$0-3]} = ${$$[$0-1].traduction};`); this.$.addChild($$[$0-1]); 
break;
case 29:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], $$[$0-3], true, null, `const ${$$[$0-5]}: ${$$[$0-3]} = ${$$[$0-1].traduction};`, false); this.$.addChild($$[$0-1]); 
break;
case 30:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.DECLARATION, $$[$0-7], $$[$0-5], true, null, `const ${$$[$0-7]}: ${$$[$0-5]}[] = ${$$[$0-1].traduction};`, true); this.$.addChild($$[$0-1]); 
break;
case 31: case 39: case 94:
 this.$ = null; 
break;
case 32:
 this.$ = new ParseNode(null, null, null, $$[$0-1], util.literal.dataTypes.ANY, false, true, ` = ${$$[$0-1].traduction};`, false); 
break;
case 33:
 this.$ = new ParseNode(null, null, null, $$[$0], $$[$0-1], false, false); if($$[$0]){ this.$.traduction = `: ${$$[$0-1]}${$$[$0].traduction}`; this.$.array = $$[$0].array; }else{ this.$.traduction = ';'; this.$.array = false; } 
break;
case 34:
 this.$ = util.literal.dataTypes.STRING; 
break;
case 35:
 this.$ = util.literal.dataTypes.BOOLEAN; 
break;
case 36:
 this.$ = util.literal.dataTypes.NUMBER; 
break;
case 37:
 this.$ = util.literal.dataTypes.VOID; 
break;
case 40:
 this.$ = $$[$0-1]; this.$.array = true; this.$.traduction = `[] = ${$$[$0-1].traduction}`; 
break;
case 41:
 this.$ = new ParseNode(null, null, null, null, null, null, null, `[];`, true); 
break;
case 42:
 this.$ = $$[$0-1]; this.$.array = false; this.$.traduction = ` = ${$$[$0-1].traduction};`; 
break;
case 43:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, $$[$0-3], null, null, null, `${$$[$0-3]} = ${$$[$0-1].traduction};`); this.$.addChild($$[$0-1]); 
break;
case 44:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, util.literal.operation.ASSIGNMENT, null, null, null, `${$$[$0-3].traduction} = ${$$[$0-1].traduction};`); this.$.addChild($$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 45:
 $$[$0].traduction = `, ${$$[$0].traduction}`; $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 46:
 this.$ = []; this.$.push($$[$0]); 
break;
case 47:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OR, util.literal.operation.OR, null, null, null, `${$$[$0-2].traduction} || ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 48:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.AND, util.literal.operation.AND, null, null, null, `${$$[$0-2].traduction} && ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 49:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.NOT, util.literal.operation.NOT, null, null, null, `!${$$[$0].traduction}`); this.$.addChild($$[$0]); 
break;
case 53:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN, util.literal.operation.LESS_THAN, null, null, null, `${$$[$0-2].traduction} < ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 54:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN, util.literal.operation.GREATER_THAN, null, null, null, `${$$[$0-2].traduction} > ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 55:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN_OR_EQUAL_TO, util.literal.operation.LESS_THAN_OR_EQUAL_TO, null, null, null, `${$$[$0-2].traduction} <= ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 56:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, null, null, null, `${$$[$0-2].traduction} >= ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 57:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.JUST_AS, util.literal.operation.JUST_AS, null, null, null, `${$$[$0-2].traduction} == ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 58:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OTHER_THAN, util.literal.operation.OTHER_THAN, null, null, null, `${$$[$0-2].traduction} != ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 60:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.POW, util.literal.operation.POW, null, null, null, `${$$[$0-2].traduction} ** ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 61:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MODULUS, util.literal.operation.MODULUS, null, null, null, `${$$[$0-2].traduction} % ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 62:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DIVISION, util.literal.operation.DIVISION, null, null, null, `${$$[$0-2].traduction} / ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 63:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MULTIPLICATION, util.literal.operation.MULTIPLICATION, null, null, null, `${$$[$0-2].traduction} * ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 64:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.SUBTRACTION, util.literal.operation.SUBTRACTION, null, null, null, `${$$[$0-2].traduction} - ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 65:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ADDITION, util.literal.operation.ADDITION, null, null, null, `${$$[$0-2].traduction} + ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 66:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.UNARY_MINUS, util.literal.operation.UNARY_MINUS, null, null, null, `-${$$[$0].traduction}`); this.$.addChild($$[$0]); 
break;
case 67:
 this.$ = $$[$0-1]; this.$.traduction = `(${$$[$0-1].traduction})`; 
break;
case 71:
 this.$ = $$[$0]; AddFunctionNodes($$[$0]); 
break;
case 73:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.VARIABLE, $$[$0], null, null, null, $$[$0]); 
break;
case 74:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.STRING, $$[$0], null, null, null, `'${$$[$0]}'`); 
break;
case 75:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NUMBER, Number($$[$0]), null, null, null, $$[$0]); 
break;
case 76:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.BOOLEAN, ($$[$0] === 'true'), null, null, null, $$[$0]); 
break;
case 77:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NULL, undefined, null, null, null, $$[$0]); 
break;
case 79:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.INCREMENT, util.literal.operation.INCREMENT, null, null, null, `${$$[$0-1].traduction}++`); this.$.addChild($$[$0-1]); 
break;
case 80:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.DECREMENT, util.literal.operation.DECREMENT, null, null, null, `${$$[$0-1].traduction}--`); this.$.addChild($$[$0-1]); 
break;
case 81:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.TERNARY_OPERATOR, util.literal.operation.TERNARY_OPERATOR, null, null, null, `${$$[$0-4].traduction} ? ${$$[$0-2].traduction} : ${$$[$0].traduction}`); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 82:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.TYPE_DECLARATION, $$[$0-4], util.literal.dataTypes.OBJECT, null, null, `type ${$$[$0-4]} = {\n${ConcatInstructions($$[$0-1])}\n}`); this.$.childs = $$[$0-1]; 
break;
case 83:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.TYPE_DECLARATION, $$[$0-5], util.literal.dataTypes.OBJECT, null, null, `type ${$$[$0-5]} = {\n${ConcatInstructions($$[$0-2])},\n}`); this.$.childs = $$[$0-2]; 
break;
case 84:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.TYPE_DECLARATION, $$[$0-5], util.literal.dataTypes.OBJECT, null, null, `type ${$$[$0-5]} = {\n${ConcatInstructions($$[$0-2])};\n}`); this.$.childs = $$[$0-2]; 
break;
case 85:
 $$[$0].traduction = `,\n\t${$$[$0].traduction}`; $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 86:
 $$[$0].traduction = `;\n\t${$$[$0].traduction}`; $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 87:
 this.$ = []; $$[$0].traduction = `\t${$$[$0].traduction}`; this.$.push($$[$0]); 
break;
case 88:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, null, $$[$0-2], $$[$0], false, false, `${$$[$0-2]}: ${$$[$0]}`, false); 
break;
case 89:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-4], $$[$0-2], false, false, `${$$[$0-4]}: ${$$[$0-2]}[]`, true); 
break;
case 90:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, null, $$[$0], util.literal.dataTypes.ANY, false, true, `${$$[$0]}`, false); 
break;
case 91:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.IF, util.literal.operation.IF, null, null, null,`if(${$$[$0-2].traduction})`); this.$.addChild($$[$0-2]); if($$[$0] != null){ this.$.traduction += $$[$0].traduction; this.$.addChild($$[$0]); }else{ this.$.traduction += '{\n}'; } 
break;
case 92:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF, null, null, null, `if(${$$[$0-4].traduction})`); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.traduction += $$[$0-2].traduction + 'else'; this.$.addChild($$[$0-2]); }else{ this.$.traduction += '{\n}else'; } let elseNode = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); if($$[$0] != null){ this.$.traduction += $$[$0].traduction; elseNode.addChild($$[$0]); this.$.addChild(elseNode); }else{ this.$.traduction += '{\n}'; } 
break;
case 93:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF, null, null, null, `if(${$$[$0-4].traduction})`); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.traduction += $$[$0-2].traduction + 'else '; this.$.addChild($$[$0-2]); }else{ this.$.traduction += '{\n}else '; } let elseNode2 = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); this.$.addChild(elseNode2); this.$.traduction += $$[$0].traduction; this.$.addChild($$[$0]); 
break;
case 95:
 this.$ = $$[$0-1]; if(this.$.her != undefined){ this.$.traduction += `\n${this.$.her}`; } this.$.traduction = `{\n\t${$$[$0-1].traduction}\n}`; 
break;
case 96:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH, null, null, null, `switch(${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-3]); 
break;
case 97:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH, null, null, null, `switch(${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 98:
 $$[$0-1].traduction += '\n' + $$[$0].traduction; $$[$0-1].addChild($$[$0]); this.$ = $$[$0-1]; 
break;
case 99:
 this.$ = new ParseNode(null, null, util.literal.operation.LCASES, util.literal.operation.LCASES, null, null, null, $$[$0].traduction); this.$.addChild($$[$0]); 
break;
case 100:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.CASE, util.literal.operation.CASE, null, null, null, `\tcase ${$$[$0-1].traduction}:`); 
break;
case 101:
 if($$[$0].her != undefined){ $$[$0].traduction += `\n${$$[$0].her}`; }  this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.CASE, util.literal.operation.CASE, null, null, null, `\tcase ${$$[$0-2].traduction}:\n\t${$$[$0].traduction}`); this.$.addChild($$[$0]); 
break;
case 102:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT, null, null, null, `\tdefault:`); 
break;
case 103:
 if($$[$0].her != undefined){ $$[$0].traduction += `\n${$$[$0].her}`; } this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT, null, null, null, `\tdefault:\n\t${$$[$0].traduction}`); this.$.addChild($$[$0]); 
break;
case 104:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE, null, null, null, `while(${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-3]); 
break;
case 105:
 if($$[$0-1].her != undefined){ $$[$0-1].traduction += `\n${$$[$0-1].her}`; } this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE, null, null, null, `while(${$$[$0-4].traduction}){\n\t${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 106:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE, null, null, null, `do{\n}while(${$$[$0-2].traduction});`); this.$.addChild($$[$0-2]); 
break;
case 107:
 if($$[$0-6].her != undefined){ $$[$0-6].traduction += `\n${$$[$0-6].her}`; } this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE, null, null, null, `do{\n${$$[$0-6].traduction}\n}while(${$$[$0-2].traduction});`); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-2]); 
break;
case 108: case 109:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR, util.literal.operation.FOR, null, null, null, `for(${$$[$0-6].traduction} ${$$[$0-5].traduction}; ${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 110: case 111:
 if($$[$0-1].her != undefined){ $$[$0-1].traduction += `\n${$$[$0-1].her}`; } this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR, util.literal.operation.FOR, null, null, null, `for(${$$[$0-7].traduction} ${$$[$0-6].traduction}; ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-7]); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 114:
 if($$[$0-1].her != undefined){ $$[$0-1].traduction += `\n${$$[$0-1].her}`; } this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN, null, null, null, `for(${$$[$0-6].traduction} in ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 115:
 if($$[$0-1].her != undefined){ $$[$0-1].traduction += `\n${$$[$0-1].her}`; } this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN, null, null, null, `for(${$$[$0-6]} in ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild(new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.dataTypes.VARIABLE, $$[$0-6])); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 116:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN, null, null, null, `for(${$$[$0-5].traduction} in ${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 117:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN, null, null, null, `for(${$$[$0-5]} in ${$$[$0-3].traduction}){\n}`); this.$.addChild(new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.dataTypes.VARIABLE, $$[$0-5])); this.$.addChild($$[$0-3]); 
break;
case 118:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0], util.literal.dataTypes.ANY, false, true, `let ${$$[$0]}`); 
break;
case 119:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-2], util.literal.dataTypes.ANY, false, true, `let ${$$[$0-2]}: ${$$[$0]}`); 
break;
case 120:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-4], util.literal.dataTypes.ANY, false, true, `let ${$$[$0-4]}: ${$$[$0-2]}[]`); 
break;
case 121:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0], util.literal.dataTypes.ANY, false, true, `const ${$$[$0]}`); 
break;
case 122:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-2], util.literal.dataTypes.ANY, false, true, `const ${$$[$0-2]}: ${$$[$0]}`); 
break;
case 123:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-4], util.literal.dataTypes.ANY, false, true, `const ${$$[$0-4]}: ${$$[$0-2]}[]`); 
break;
case 124:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF, null, null, null, `for(${$$[$0-5].traduction} of ${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 125:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF, null, null, null, `for(${$$[$0-5]} of ${$$[$0-3].traduction}){\n}`); this.$.addChild(new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.dataTypes.VARIABLE, $$[$0-5])); this.$.addChild($$[$0-3]); 
break;
case 126:
 if($$[$0-1].her != undefined){ $$[$0-1].traduction += `\n${$$[$0-1].her}`; } this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF, null, null, null, `for(${$$[$0-6].traduction} in ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 127:
 if($$[$0-1].her != undefined){ $$[$0-1].traduction += `\n${$$[$0-1].her}`; } this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF, null, null, null, `for(${$$[$0-6]} in ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild(new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.dataTypes.VARIABLE, $$[$0-6])); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 128:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ARRAY_ACCESS, $$[$0-3], null, null, null, `${$$[$0-3]}[${$$[$0-1].traduction}]`); this.$.addChild($$[$0-1]); 
break;
case 129:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.FUNCTION_CALL, $$[$0-2], null, null, null, `${$$[$0-2]}()`); 
break;
case 130:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.FUNCTION_CALL, $$[$0-3], null, null, null, `${$$[$0-3]}(${ConcatInstructions($$[$0-1])})`); this.$.childs = $$[$0-1]; 
break;
case 132:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.PROPERTY_ACCESS, util.literal.operation.PROPERTY_ACCESS, null, null, null, `${$$[$0-2].traduction}.${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 133:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.PRINT, util.literal.operation.PRINT, null, null, null, `console.log(${$$[$0-2].traduction});`); this.$.addChild($$[$0-2]); 
break;
case 134:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.PRINT, util.literal.operation.PRINT, null, null, null, `console.log();`); 
break;
case 135:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.GRAPH_TS, util.literal.operation.GRAPH_TS, null, null, null, `graficar_ts();`); 
break;
case 136:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.BREAK, util.literal.operation.BREAK, null, null, null, `break;`); 
break;
case 137:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.CONTINUE, util.literal.operation.CONTINUE, null, null, null, `continue`); 
break;
case 138:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.RETURN, util.literal.operation.RETURN, null, null, null, `return;`); 
break;
case 139:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.RETURN, util.literal.operation.RETURN, null, null, null, `return ${$$[$0-1].traduction};`); this.$.addChild($$[$0-1]); 
break;
case 140:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFINITION, util.literal.operation.DEFINITION, null, null, null, `{\n${ConcatInstructions($$[$0-1])}\n}`); this.$.childs = $$[$0-1]; 
break;
case 141:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DEFINITION, util.literal.operation.DEFINITION, null, null, null, `{}`); 
break;
case 142:
 let decl2 = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.PROPERTY_DECLARATION, $$[$0-2], null, null, null, `,\n\t${$$[$0-2]}: ${$$[$0].traduction}`); decl2.addChild($$[$0]); $$[$0-4].push(decl2); this.$ = $$[$0-4]; 
break;
case 143:
 this.$ = []; let decl = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.PROPERTY_DECLARATION, $$[$0-2], null, null, null, `\t${$$[$0-2]}: ${$$[$0].traduction}`); decl.addChild($$[$0]); this.$.push(decl); 
break;
case 144:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ARRAY, util.literal.operation.ARRAY, null, null, null, `[]`); 
break;
case 145:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.ARRAY, util.literal.operation.ARRAY, null, null, null, `[${ConcatInstructions($$[$0-1])}]`); this.$.childs = $$[$0-1]; 
break;
case 146:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.PUSH, util.literal.operation.PUSH, null, null, null, `${$$[$0-5].traduction}.Push(${$$[$0-1].traduction})`); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-1]); 
break;
case 147:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.POP, util.literal.operation.POP, null, null, null, `${$$[$0-4].traduction}.Pop()`); this.$.addChild($$[$0-4]); 
break;
case 148:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.LENGTH, util.literal.operation.LENGTH, null, null, null, `${$$[$0-2].traduction}.Length`); this.$.addChild($$[$0-2]); 
break;
case 149:
 let stack = eval('$$'); this.$ = stack[stack.length - 2]; 
break;
case 150:
 let nameFunction = FatherName($$[$0-1]); this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.FUNCTION, util.literal.operation.FUNCTION, null, null, null, `function ${$$[$0-1]}(`); this.$.addChild(new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.dataTypes.VARIABLE, `${nameFunction}`)); MapNames.set($$[$0-1], nameFunction); 
break;
case 157:
 let stack15 = eval('$$'); stack15[stack15.length - 7].traduction = `${stack15[stack15.length - 7].traduction}${stack15[stack15.length - 6].childs[0].traduction}): ${stack15[stack15.length - 3]}{\n}`; stack15[stack15.length - 7].type =  stack15[stack15.length - 3]; stack15[stack15.length - 7].array = false; stack15[stack15.length - 7].addChild(stack15[stack15.length - 6]); her.pop(); 
break;
case 158:
 
            let stack16 = eval('$$'); 
            stack16[stack16.length - 8].traduction = `${stack16[stack16.length - 8].traduction}${stack16[stack16.length - 7].childs[0].traduction}): ${stack16[stack16.length - 4]}{\n${$$[$0-1].traduction}\n}`; 
            stack16[stack16.length - 8].type =  stack16[stack16.length - 4];
            if($$[$0-1].her != undefined){
                stack16[stack16.length - 8].traduction += `\n${$$[$0-1].her}`;
            }
            her.pop(); 
            stack16[stack16.length - 8].array = false; stack16[stack16.length - 8].addChild(stack16[stack16.length - 7]); 
            stack16[stack16.length - 8].addChild($$[$0-1]); 
        
break;
case 159:
 let stack18 = eval('$$'); stack18[stack18.length - 9].traduction = `${stack18[stack18.length - 9].traduction}${stack18[stack18.length - 8].childs[0].traduction}): ${stack18[stack18.length - 5]}[]{\n}`; stack18[stack18.length - 9].type = stack18[stack18.length - 5]; stack18[stack18.length - 9].array = true; stack18[stack18.length - 9].addChild(stack18[stack18.length - 8]); her.pop(); 
break;
case 160:
 
            let stack19 = eval('$$');
            stack19[stack19.length - 10].traduction = `${stack19[stack19.length - 10].traduction}${stack19[stack19.length - 9].childs[0].traduction}): ${stack19[stack19.length - 6]}[]{\n${$$[$0-1].traduction}\n}`; 
            stack19[stack19.length - 10].type = stack19[stack19.length - 6];
            if($$[$0-1].her != undefined){
                stack19[stack19.length - 10].traduction += `\n${$$[$0-1].her}`;
            }
            her.pop(); 
            stack19[stack19.length - 10].array = true; stack19[stack19.length - 10].addChild(stack19[stack19.length - 9]); 
            stack19[stack19.length - 10].addChild($$[$0-1]); 
        
break;
case 161:
 let stack11 = eval('$$'); stack11[stack11.length - 5].traduction = `${stack11[stack11.length - 5].traduction}${stack11[stack11.length - 4].childs[0].traduction}){\n}`; stack11[stack11.length - 5].type = util.literal.dataTypes.ANY; stack11[stack11.length - 5].addChild(stack11[stack11.length - 4]); her.pop(); 
break;
case 162:
 
            let stack17 = eval('$$');
            stack17[stack17.length - 6].traduction = `${stack17[stack17.length - 6].traduction}${stack17[stack17.length - 5].childs[0].traduction}){\n${$$[$0-1].traduction}\n}`;
            stack17[stack17.length - 6].type = util.literal.dataTypes.ANY;
            if($$[$0-1].her != undefined){
                stack17[stack17.length - 6].traduction += `\n${$$[$0-1].her}`;
            }
            her.pop();
            stack17[stack17.length - 6].addChild(stack17[stack17.length - 5]);
            stack17[stack17.length - 6].addChild($$[$0-1]); 
        
break;
case 165:
 let stack2 = eval('$$'); stack2[stack2.length - 4].traduction = `${stack2[stack2.length - 4].traduction}){\n}`; stack2[stack2.length - 4].type = util.literal.dataTypes.ANY; her.pop(); 
break;
case 166:
 
            let stack3 = eval('$$');
            stack3[stack3.length - 5].traduction = `${stack3[stack3.length - 5].traduction}){\n${$$[$0-1].traduction}\n}`;
            if($$[$0-1].her != undefined){
                stack3[stack3.length - 5].traduction += `\n${$$[$0-1].her}`;
            }
            her.pop();
            stack3[stack3.length - 5].addChild($$[$0-1]);
            stack3[stack3.length - 5].type = util.literal.dataTypes.ANY; 
        
break;
case 169:
 let stack6 = eval('$$'); stack6[stack6.length - 6].traduction = `${stack6[stack6.length - 6].traduction}): ${stack6[stack6.length - 3]}{\n}`; stack6[stack6.length - 6].type = stack6[stack6.length - 3]; stack6[stack6.length - 6].array = false; her.pop(); 
break;
case 170:
 
            let stack7 = eval('$$'); 
            stack7[stack7.length - 7].traduction = `${stack7[stack7.length - 7].traduction}): ${stack7[stack7.length - 4]}{\n${$$[$0-1].traduction}\n}`; 
            if($$[$0-1].her != undefined){
                stack7[stack7.length - 7].traduction += `\n${$$[$0-1].her}`;
            }
            her.pop();
            stack7[stack7.length - 7].type = stack7[stack7.length - 4]; 
            stack7[stack7.length - 7].array = false; 
            stack7[stack7.length - 7].addChild($$[$0-1]); 
        
break;
case 171:
 let stack8 = eval('$$'); stack8[stack8.length - 8].traduction = `${stack8[stack8.length - 8].traduction}): ${stack8[stack8.length - 5]}[]{\n}`; stack8[stack8.length - 8].type = stack8[stack8.length - 5]; stack8[stack8.length - 8].array = true; her.pop(); 
break;
case 172:
 
            let stack9 = eval('$$'); 
            stack9[stack9.length - 9].traduction = `${stack9[stack9.length - 9].traduction}): ${stack9[stack9.length - 6]}[]{\n${$$[$0-1].traduction}\n}`;
            if($$[$0-1].her != undefined){
                stack9[stack9.length - 9].traduction += `\n${$$[$0-1].her}`;
            }
            her.pop(); 
            stack9[stack9.length - 9].type = stack9[stack9.length - 6]; 
            stack9[stack9.length - 9].array = true; 
            stack9[stack9.length - 9].addChild($$[$0-1]); 
        
break;
case 173:
 this.$ = new ParseNode(0, 0, 'LPARAMETERS', 'LPARAMETERS'); $$[$0-1].traduction = `${$$[$0-1].traduction}${$$[$0].childs[0].traduction}`; this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 174:
 this.$  = new ParseNode(0, 0, 'LPARAMETERS', 'LPARAMETERS'); $$[$0-1].traduction = `, ${$$[$0-1].traduction}${$$[$0].childs[0].traduction}`; this.$.addChild($$[$0-1]); this.$.addChild($$[$0]); 
break;
case 175:
 this.$ = new ParseNode(0, 0, 'LPARAMETERS', 'LPARAMETERS'); this.$.addChild(new ParseNode(0, 0, null, util.literal.dataTypes.EPSILON, null, null, null, '')); 
break;
case 178:
 let stack10 = eval('$$'); this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, null, `${stack10[stack10.length - 1]}`, util.literal.dataTypes.ANY, false, true, `${stack10[stack10.length - 1]}`); 
break;
case 179:
 let stack14 =  eval('$$'); this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, null, `${stack14[stack14.length - 5]}`, `${stack14[stack14.length - 3]}`, false, false, `${stack14[stack14.length - 5]}: ${stack14[stack14.length - 3]}[]`, true); 
break;
case 180:
 let stack13 =  eval('$$'); this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, null, `${stack13[stack13.length - 3]}`, `${stack13[stack13.length - 1]}`, false, false, `${stack13[stack13.length - 3]}: ${stack13[stack13.length - 1]}`, false); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{1:[3]},{2:$V0,5:[1,60],6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},o($Vp,[2,3]),o($Vp,[2,4]),o($Vp,[2,5]),o($Vp,[2,6]),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vq,$Vr,{16:[1,62]}),o($Vq,$Vs,{16:[1,63]}),o($Vp,[2,14]),o($Vp,[2,15]),o($Vq,$Vt,{16:[1,64]}),o($Vp,[2,17]),o($Vp,[2,18]),o($Vp,[2,19]),o($Vp,[2,20]),o($Vp,[2,21]),o([34,48,49,77,98],$Vu,{16:[1,65]}),o($Vp,[2,23]),o($Vp,[2,24]),o($Vp,[2,25]),o($Vp,[2,26]),o($Vq,$Vv,{34:$Vw,38:$Vx,66:$Vy}),o([48,49,77,98],$Vz,{34:[1,69]}),{31:[1,70]},{66:[1,71]},{66:[1,72]},{66:[1,73]},{79:[1,74]},{66:[1,75]},o($VA,[2,59],{60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,75:$VH,76:$VI}),{98:[1,84]},{66:[1,85]},{16:[1,86]},{16:[1,87]},{15:92,16:[1,88],17:93,20:94,26:91,31:$VJ,35:89,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{48:$VK,49:$VL,77:$VM,98:$VN},{31:$VO,67:[1,101],110:100,113:102,123:103},{31:[1,105]},{31:[1,106]},{15:92,17:93,20:94,31:$VJ,38:$V4,59:107,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:108,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($VP,[2,70]),o($VP,[2,72]),o($VP,[2,74]),o($VP,[2,75]),o($VP,[2,76]),o($VP,[2,77]),o($VP,[2,78]),{15:92,17:93,20:94,26:91,31:$VJ,35:109,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($VQ,[2,50]),o($VQ,[2,52],{53:$VR,54:$VS,55:$VT,56:$VU,57:[1,114],58:[1,115]}),{31:[1,116]},{15:92,17:93,20:94,26:91,31:$VJ,35:119,38:$V4,39:[1,117],45:90,46:118,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{31:[1,122],81:[1,121],105:120},{1:[2,1]},o($Vp,[2,2]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,16]),o($Vp,[2,22]),{15:92,17:93,20:94,26:91,31:$VJ,35:123,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:119,38:$V4,45:90,46:125,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,67:[1,124],68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:126,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:127,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{34:[1,128]},{15:92,17:93,20:94,26:91,31:$VJ,35:129,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:130,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:131,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{2:$V0,4:133,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,132],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{7:137,8:138,15:92,17:93,20:94,26:91,28:25,29:26,30:[1,139],31:[1,136],33:[1,140],35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd,94:134,95:135},o($VP,[2,79]),o($VP,[2,80]),{15:92,17:93,20:94,31:$VJ,38:$V4,59:141,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,59:142,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,59:143,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,59:144,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,59:145,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,59:146,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{100:[1,147]},{67:[1,148]},o($Vp,[2,136]),o($Vp,[2,137]),o($Vp,[2,138]),{16:[1,149],48:$VK,49:$VL,77:$VM,98:$VN},o($VQ,$Vz),o($VQ,$Vu),o($VP,$Vr),o($VP,$Vs),o($VP,$Vt),o($VP,$Vv,{38:$Vx,66:$Vy}),{15:92,17:93,20:94,26:91,31:$VJ,35:153,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd,106:[1,150],107:[1,151],108:[1,152]},{15:92,17:93,20:94,26:91,31:$VJ,35:154,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:155,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:156,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vp,[2,149]),{36:[1,159],79:[1,158],112:157},{67:[1,160]},{47:$VV,67:$VW,124:161},o($VX,[2,178],{125:163,36:[1,164]}),{16:$VY,32:165,34:$VZ,36:[1,168]},{34:$V_,36:[1,170]},o($V$,[2,66],{60:$VB,61:$VC,62:$VD,63:$VE,75:$VH,76:$VI}),{48:$VK,49:$VL,67:[1,171],77:$VM,98:$VN},o($V01,[2,49],{98:$VN}),{15:92,17:93,20:94,31:$VJ,38:$V4,52:172,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,52:173,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,52:174,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,52:175,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,52:176,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,31:$VJ,38:$V4,52:177,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{66:[1,178]},o($VP,[2,144]),{39:[1,179],47:$V11},o($V21,[2,46],{48:$VK,49:$VL,77:$VM,98:$VN}),{47:[1,182],81:[1,181]},o($VP,[2,141]),{36:[1,183]},{16:[1,184],48:$VK,49:$VL,77:$VM,98:$VN},o($VP,[2,129]),{47:$V11,67:[1,185]},{39:[1,186],48:$VK,49:$VL,77:$VM,98:$VN},{16:[1,187],48:$VK,49:$VL,77:$VM,98:$VN},{79:[1,188]},{48:$VK,49:$VL,67:[1,189],77:$VM,98:$VN},{48:$VK,49:$VL,67:[1,190],77:$VM,98:$VN},{48:$VK,49:$VL,67:[1,191],77:$VM,98:$VN},{91:[1,192]},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,193],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{15:92,17:93,20:94,26:91,31:$VJ,35:194,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{96:[1,195],97:[1,196]},o($Vq,$Vv,{34:$Vw,38:$Vx,66:$Vy,96:[1,197],97:[1,198]}),o($V31,[2,112]),o($V31,[2,113]),{31:[1,199]},{31:[1,200]},o($V41,[2,60],{60:$VB,75:$VH,76:$VI}),o($V41,[2,61],{60:$VB,75:$VH,76:$VI}),o($V41,[2,62],{60:$VB,75:$VH,76:$VI}),o($V41,[2,63],{60:$VB,75:$VH,76:$VI}),o($V$,[2,64],{60:$VB,61:$VC,62:$VD,63:$VE,75:$VH,76:$VI}),o($V$,[2,65],{60:$VB,61:$VC,62:$VD,63:$VE,75:$VH,76:$VI}),{66:[1,201]},{16:[1,202]},o($Vp,[2,139]),{66:[1,203]},{66:[1,204]},o($VQ,[2,148]),o($VQ,[2,132]),o([16,34,36,39,47,48,67,77,81],[2,47],{49:$VL,98:$VN}),o($V01,[2,48],{98:$VN}),{36:[1,205],48:$VK,49:$VL,77:$VM,98:$VN},o($Vp,[2,151]),{2:$V0,4:208,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,207],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo,119:206},{31:$V51,37:209,41:$V61,42:$V71,43:$V81,44:$V91},{36:[1,216],79:[1,217],114:215},{67:[2,173]},{31:$VO,123:218},o($VX,[2,176]),{31:$V51,37:219,41:$V61,42:$V71,43:$V81,44:$V91},o($Vp,[2,27]),o($Vp,[2,31]),{15:92,17:93,20:94,26:91,31:$VJ,35:220,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{31:$V51,37:221,41:$V61,42:$V71,43:$V81,44:$V91},{15:92,17:93,20:94,26:91,31:$VJ,35:222,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{31:$V51,37:223,41:$V61,42:$V71,43:$V81,44:$V91},o($VP,[2,67]),o($VA,[2,53]),o($VA,[2,54]),o($VA,[2,55]),o($VA,[2,56]),o($Va1,[2,57],{53:$VR,54:$VS,55:$VT,56:$VU}),o($Va1,[2,58],{53:$VR,54:$VS,55:$VT,56:$VU}),o([31,67],[2,150]),o($VP,[2,145]),{15:92,17:93,20:94,26:91,31:$VJ,35:224,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($VP,[2,140]),{31:[1,225]},{15:92,17:93,20:94,26:91,31:$VJ,35:226,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vp,[2,43]),o($VP,[2,130]),o($VP,[2,128]),o($Vp,[2,44]),{31:$Vb1,80:227,82:228},{79:$Vc1,84:230},{79:[1,232]},{79:[1,233]},{66:[1,234]},{91:[1,235]},{16:[1,236],48:$VK,49:$VL,77:$VM,98:$VN},{15:92,17:93,20:94,26:91,31:$VJ,35:237,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:238,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:239,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{15:92,17:93,20:94,26:91,31:$VJ,35:240,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vd1,[2,118],{32:165,16:$VY,34:$VZ,36:[1,241]}),o($Vd1,[2,121],{34:$V_,36:[1,242]}),{15:92,17:93,20:94,26:91,31:$VJ,35:243,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,67:[1,244],68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vp,[2,135]),{15:92,17:93,20:94,26:91,31:$VJ,35:245,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{67:[1,246]},{15:92,17:93,20:94,26:91,31:$VJ,35:247,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vp,[2,163]),o($Vp,[2,165]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,248],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{38:[1,251],79:[1,250],120:249},o($Ve1,[2,34]),o($Ve1,[2,35]),o($Ve1,[2,36]),o($Ve1,[2,37]),o($Ve1,[2,38]),o($Vp,[2,152]),{31:$V51,37:252,41:$V61,42:$V71,43:$V81,44:$V91},{2:$V0,4:255,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,254],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo,116:253},{47:$VV,67:$VW,124:256},o($VX,[2,180],{126:257,38:[1,258]}),{16:[1,259],48:$VK,49:$VL,77:$VM,98:$VN},{16:$Vf1,34:$Vg1,38:[1,262],40:260},{16:[1,264],48:$VK,49:$VL,77:$VM,98:$VN},{34:$Vh1,38:[1,266]},o($V21,[2,45],{48:$VK,49:$VL,77:$VM,98:$VN}),{36:[1,267]},o($Vi1,[2,143],{48:$VK,49:$VL,77:$VM,98:$VN}),{16:[1,270],47:[1,269],81:[1,268]},o($Vj1,[2,87]),o($Vj1,[2,90],{36:[1,271]}),o($Vp,[2,91],{85:[1,272]}),{2:$V0,4:274,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,273],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{81:[1,275],87:276,88:277,89:$Vk1,90:$Vl1},{2:$V0,4:281,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,280],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{15:92,17:93,20:94,26:91,31:$VJ,35:282,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{66:[1,283]},{15:284,17:285,20:94,31:$VJ,38:$V4,59:286,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{48:$VK,49:$VL,67:[1,287],77:$VM,98:$VN},{48:$VK,49:$VL,67:[1,288],77:$VM,98:$VN},{48:$VK,49:$VL,67:[1,289],77:$VM,98:$VN},{48:$VK,49:$VL,67:[1,290],77:$VM,98:$VN},{31:$V51,37:291,41:$V61,42:$V71,43:$V81,44:$V91},{31:$V51,37:292,41:$V61,42:$V71,43:$V81,44:$V91},{48:$VK,49:$VL,67:[1,293],77:$VM,98:$VN},{16:[1,294]},{48:$VK,49:$VL,67:[1,295],77:$VM,98:$VN},o($VQ,[2,147]),o([16,34,36,39,47,67,81],[2,81],{48:$VK,49:$VL,77:$VM,98:$VN}),o($Vp,[2,166]),o($Vp,[2,164]),{2:$V0,4:298,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,297],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo,121:296},{39:[1,299]},{38:[1,301],79:[1,302],115:300},o($Vp,[2,154]),o($Vp,[2,161]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,303],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{67:[2,174]},o($VX,[2,177]),{39:[1,304]},o($Vp,[2,32]),o($Vp,[2,33]),o($Vp,[2,39]),{39:[1,305]},{15:92,17:93,20:94,26:91,31:$VJ,35:306,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vp,[2,28]),{15:92,17:93,20:94,26:91,31:$VJ,35:307,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{39:[1,308]},{15:92,17:93,20:94,26:91,31:$VJ,35:309,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vp,[2,82]),{31:$Vb1,81:[1,310],82:311},{31:$Vb1,81:[1,312],82:313},{31:$V51,37:314,41:$V61,42:$V71,43:$V81,44:$V91},{10:316,79:$Vc1,83:$Ve,84:315},o($Vm1,[2,94]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,317],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},o($Vp,[2,96]),{81:[1,318],88:319,89:$Vk1,90:$Vl1},o($Vn1,[2,99]),{15:92,17:93,20:94,26:91,31:$VJ,35:320,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{36:[1,321]},o($Vp,[2,104]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,322],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{48:$VK,49:$VL,67:[1,323],77:$VM,98:$VN},{15:92,17:93,20:94,26:91,31:$VJ,35:324,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vo1,$Vr,{67:[1,325]}),o($Vo1,$Vs,{67:[1,326]}),{60:$VB,61:$VC,62:$VD,63:$VE,64:$VF,65:$VG,75:$VH,76:$VI},{79:[1,327]},{79:[1,328]},{79:[1,329]},{79:[1,330]},o($Vd1,[2,119],{40:260,16:$Vf1,34:$Vg1,38:[1,331]}),o($Vd1,[2,122],{34:$Vh1,38:[1,332]}),{16:[1,333]},o($Vp,[2,134]),o($VQ,[2,146]),o($Vp,[2,167]),o($Vp,[2,169]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,334],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{79:[1,335]},o($Vp,[2,153]),{39:[1,336]},{2:$V0,4:339,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,338],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo,118:337},o($Vp,[2,162]),o($VX,[2,179]),{16:$Vp1,34:$Vq1},{16:[1,342],48:$VK,49:$VL,77:$VM,98:$VN},{16:[1,343],48:$VK,49:$VL,77:$VM,98:$VN},{34:$Vr1},o($Vi1,[2,142],{48:$VK,49:$VL,77:$VM,98:$VN}),o($Vp,[2,83]),o($Vj1,[2,85]),o($Vp,[2,84]),o($Vj1,[2,86]),o($Vj1,[2,88],{38:[1,345]}),o($Vp,[2,92]),o($Vp,[2,93]),o($Vm1,[2,95]),o($Vp,[2,97]),o($Vn1,[2,98]),{36:[1,346],48:$VK,49:$VL,77:$VM,98:$VN},o($Vn1,[2,102],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,45:28,59:35,35:41,109:42,68:47,69:48,74:53,51:55,52:56,4:347,2:$V0,30:$V1,31:$V2,33:$V3,38:$V4,50:$V5,64:$V6,66:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,78:$Vc,79:$Vd,83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,111:$Vo}),o($Vp,[2,105]),{16:[1,348]},{48:$VK,49:$VL,67:[1,349],77:$VM,98:$VN},{79:[1,350]},{79:[1,351]},{2:$V0,4:352,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,353],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{2:$V0,4:355,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,354],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{2:$V0,4:356,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,357],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{2:$V0,4:359,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,358],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{39:[1,360]},{39:[1,361]},o($Vp,[2,133]),o($Vp,[2,170]),{2:$V0,4:364,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,363],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo,122:362},{79:[1,365]},o($Vp,[2,156]),o($Vp,[2,157]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,366],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{15:92,17:93,20:94,26:91,31:$VJ,35:367,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},o($Vp,[2,41]),o($Vp,[2,42]),o($Vp,[2,29]),{15:92,17:93,20:94,26:91,31:$VJ,35:368,38:$V4,45:90,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,79:$Vd},{39:[1,369]},o($Vn1,[2,100],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,45:28,59:35,35:41,109:42,68:47,69:48,74:53,51:55,52:56,4:370,2:$V0,30:$V1,31:$V2,33:$V3,38:$V4,50:$V5,64:$V6,66:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,78:$Vc,79:$Vd,83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,111:$Vo}),o($Vn1,[2,103],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,45:28,59:35,35:41,109:42,68:47,69:48,74:53,51:55,52:56,6:61,2:$V0,30:$V1,31:$V2,33:$V3,38:$V4,50:$V5,64:$V6,66:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,78:$Vc,79:$Vd,83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,111:$Vo}),o($Vp,[2,106]),{16:[1,371]},{2:$V0,4:373,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,372],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{2:$V0,4:375,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,374],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,376],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},o($Vp,[2,116]),o($Vp,[2,124]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,377],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,378],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},o($Vp,[2,117]),o($Vp,[2,125]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,379],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},o($Vd1,[2,120],{16:$Vp1,34:$Vq1}),o($Vd1,[2,123],{34:$Vr1}),o($Vp,[2,168]),o($Vp,[2,171]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,380],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},{2:$V0,4:383,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,382],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo,117:381},o($Vp,[2,158]),{16:[1,384],48:$VK,49:$VL,77:$VM,98:$VN},{16:[1,385],48:$VK,49:$VL,77:$VM,98:$VN},o($Vj1,[2,89]),o($Vn1,[2,101],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,45:28,59:35,35:41,109:42,68:47,69:48,74:53,51:55,52:56,6:61,2:$V0,30:$V1,31:$V2,33:$V3,38:$V4,50:$V5,64:$V6,66:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,78:$Vc,79:$Vd,83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,111:$Vo}),o($Vp,[2,107]),o($Vp,[2,108]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,386],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},o($Vp,[2,109]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,387],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},o($Vp,[2,114]),o($Vp,[2,126]),o($Vp,[2,115]),o($Vp,[2,127]),o($Vp,[2,172]),o($Vp,[2,155]),o($Vp,[2,159]),{2:$V0,6:61,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:25,29:26,30:$V1,31:$V2,33:$V3,35:41,38:$V4,45:28,50:$V5,51:55,52:56,59:35,64:$V6,66:$V7,68:47,69:48,70:$V8,71:$V9,72:$Va,73:$Vb,74:53,78:$Vc,79:$Vd,81:[1,388],83:$Ve,86:$Vf,91:$Vg,92:$Vh,93:$Vi,99:$Vj,101:$Vk,102:$Vl,103:$Vm,104:$Vn,109:42,111:$Vo},o($Vp,[2,40]),o($Vp,[2,30]),o($Vp,[2,110]),o($Vp,[2,111]),o($Vp,[2,160])],
defaultActions: {60:[2,1],161:[2,173],256:[2,174]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const ParseNode = require('../models/ParseNode').default;
    const ErrorClass = require('../models/Error').default;
    const util = require('../utilities/util');
    const errors = [];
    exports.errors = errors;
    const her = [];
    let nodesFunctions = [];
    let MapNames = new Map();
    let flagFunction = false;

    //Stringing of an array
    function ConcatInstructions(childs){
        let cString = '';
        childs.forEach(item => {
            cString += item.traduction;
        });
        return cString;
    }

    //inherit father's name
    function FatherName(father){
        if(her.length > 0){
            let name = '';
            her.forEach((item) => {
                name += `${item}_`;
            });
            her.push(father);
            name += father;
            return name;
        }
        her.push(father);
        return father;
    }

    //add function nodes if you are in a function
    function AddFunctionNodes(node){
        if(her.length > 0){
            nodesFunctions.push(node);
        }
    }

    //replaces translation with inheritance
    function TraductionReplace(node){
        MapNames.forEach((item, key) => {
            node.traduction = node.traduction.replaceAll(`${key}(`, `${item}(`);
        });
        nodesFunctions.forEach((item) => {
            let name = MapNames.get(item.value);
            if(name != undefined){
                item.value = name;
            }
        });
        MapNames.clear();
        nodesFunctions = [];
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* SKIP COMMENT */
break;
case 2:/* SKIP COMMENT */
break;
case 3:return 30;
break;
case 4:return 78;
break;
case 5:return 33;
break;
case 6:return 99;
break;
case 7:return 83;
break;
case 8:return 85;
break;
case 9:return 86;
break;
case 10:return 89;
break;
case 11:return 90;
break;
case 12:return 91;
break;
case 13:return 92;
break;
case 14:return 101;
break;
case 15:return 93;
break;
case 16:return 100;
break;
case 17:return 96;
break;
case 18:return 97;
break;
case 19:return 102;
break;
case 20:return 103;
break;
case 21:return 104;
break;
case 22:return 41;
break;
case 23:return 43;
break;
case 24:return 106;
break;
case 25:return 107;
break;
case 26:return 108;
break;
case 27:return 42;
break;
case 28:return 44;
break;
case 29:return 73;
break;
case 30:return 111;
break;
case 31:return 72;
break;
case 32:return 31;
break;
case 33:return 71;
break;
case 34:return 57;
break;
case 35:return 58;
break;
case 36:return 55;
break;
case 37:return 56;
break;
case 38:return 75;
break;
case 39:return 76;
break;
case 40:return 34;
break;
case 41:return 66;
break;
case 42:return 67;
break;
case 43:return 79;
break;
case 44:return 81;
break;
case 45:return 38;
break;
case 46:return 39;
break;
case 47:return 36;
break;
case 48:return 47;
break;
case 49:return 16;
break;
case 50:return 98;
break;
case 51:return 60;
break;
case 52:return 63;
break;
case 53:return 62;
break;
case 54:return 64;
break;
case 55:return 65;
break;
case 56:return 61;
break;
case 57:return 77;
break;
case 58:return 53;
break;
case 59:return 54;
break;
case 60:return 49;
break;
case 61:return 48;
break;
case 62:return 50;
break;
case 63:this.begin("chain");
break;
case 64:return 70;
break;
case 65:this.popState();
break;
case 66:this.begin("chain_simp");
break;
case 67:return 70;
break;
case 68:this.popState();
break;
case 69:return 5;
break;
case 70:
                        errors.push(new ErrorClass(util.literal.errorType.LEXICAL, `No se reconoce el token: "${yy_.yytext}"`, yy_.yylloc.first_line, yy_.yylloc.first_column));
                    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]+)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:let\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:graficar_ts\b)/,/^(?:for\b)/,/^(?:log\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Length\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:function\b)/,/^(?:(true|false))/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:[0-9]+\.?[0-9]*)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\?)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\n]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\n]+)/,/^(?:['])/,/^(?:$)/,/^(?:.)/],
conditions: {"chain_simp":{"rules":[67,68],"inclusive":false},"chain":{"rules":[64,65],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parseExecute;
exports.Parser = parseExecute.Parser;
exports.parse = function () { return parseExecute.parse.apply(parseExecute, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}