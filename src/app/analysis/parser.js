/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,24],$V1=[1,16],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[5,20,21,23,55,57,58,59,63,66,68,71,74,75,76,77,78],$Ve=[49,50,51,52,53,54,60,61],$Vf=[2,61],$Vg=[2,62],$Vh=[5,20,21,23,39,55,57,58,59,63,66,68,71,74,75,76,77,78],$Vi=[2,63],$Vj=[1,34],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,47],$Vp=[1,48],$Vq=[1,41],$Vr=[1,42],$Vs=[1,58],$Vt=[1,52],$Vu=[16,27,29,36,37,38,42,43,44,45,46,47,49,50,51,52,53,54,56,60,61,62],$Vv=[1,84],$Vw=[1,85],$Vx=[1,86],$Vy=[16,27,29,36,37,38,56,62],$Vz=[1,88],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[16,27,29,36,37,38,42,43,44,45,46,47,56,62],$VE=[21,39,55,57,58,59],$VF=[16,27,29,36,37,38,42,43,44,45,46,47,50,51,52,53,54,56,62],$VG=[16,27,29,36,37,38,42,43,44,45,46,47,53,54,56,62],$VH=[1,112],$VI=[1,108],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[1,126],$VN=[27,36],$VO=[1,130],$VP=[1,132],$VQ=[16,24,26,36,66],$VR=[16,27,29,36,37,38,46,47,56,62],$VS=[36,66],$VT=[1,162],$VU=[1,163],$VV=[5,20,21,23,55,57,58,59,63,66,68,70,71,74,75,76,77,78],$VW=[66,74,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"LSENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,"ASSIGNMENT":8,"TYPE_DECLARATION":9,"STATEMENT_IF":10,"STATEMENT_SWITCH":11,"STATEMENT_WHILE":12,"DO_WHILE":13,"STATEMENT_FOR":14,"INCREMENT":15,"SEMICOLON":16,"DECREMENT":17,"VARLET":18,"VARCONST":19,"LET":20,"IDENTIFIER":21,"ENDLET":22,"CONST":23,"EQUAL":24,"EXPL":25,"LBRACKET":26,"RBRACKET":27,"LEXPL":28,"COLON":29,"DATATYPE":30,"ENDDECLARATION":31,"TSTRING":32,"TBOOLEAN":33,"TNUMBER":34,"TVOID":35,"COMMA":36,"OR":37,"AND":38,"NOT":39,"TERNARY":40,"EXPR":41,"LESSTHAN":42,"GREATERTHAN":43,"LESSTHANOREQUALTO":44,"GREATERTHANOREQUALTO":45,"JUSTAS":46,"OTHERTHAN":47,"EXP":48,"POW":49,"MODULUSSIGN":50,"DIVISIONSIGN":51,"PORSIGN":52,"MINUSSIGN":53,"PLUSSIGN":54,"LPAREN":55,"RPAREN":56,"CHAIN":57,"NUMBER":58,"BOOLEAN":59,"INCREMENTSIGN":60,"DECREMENTSIGN":61,"QUESTIONINGSIGN":62,"TYPE":63,"LBRACE":64,"LPARAMETERS":65,"RBRACE":66,"PARAMETERS":67,"IF":68,"BODY_IF":69,"ELSE":70,"SWITCH":71,"LCASES":72,"CASES":73,"CASE":74,"DEFAULT":75,"WHILE":76,"DO":77,"FOR":78,"FOR_PARAMETER1":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SEMICOLON",20:"LET",21:"IDENTIFIER",23:"CONST",24:"EQUAL",26:"LBRACKET",27:"RBRACKET",29:"COLON",32:"TSTRING",33:"TBOOLEAN",34:"TNUMBER",35:"TVOID",36:"COMMA",37:"OR",38:"AND",39:"NOT",42:"LESSTHAN",43:"GREATERTHAN",44:"LESSTHANOREQUALTO",45:"GREATERTHANOREQUALTO",46:"JUSTAS",47:"OTHERTHAN",49:"POW",50:"MODULUSSIGN",51:"DIVISIONSIGN",52:"PORSIGN",53:"MINUSSIGN",54:"PLUSSIGN",55:"LPAREN",56:"RPAREN",57:"CHAIN",58:"NUMBER",59:"BOOLEAN",60:"INCREMENTSIGN",61:"DECREMENTSIGN",62:"QUESTIONINGSIGN",63:"TYPE",64:"LBRACE",66:"RBRACE",68:"IF",70:"ELSE",71:"SWITCH",74:"CASE",75:"DEFAULT",76:"WHILE",77:"DO",78:"FOR"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[7,1],[7,1],[18,3],[19,5],[19,6],[19,7],[19,7],[19,11],[19,10],[22,1],[22,3],[22,5],[22,4],[22,3],[30,1],[30,1],[30,1],[30,1],[30,1],[31,1],[31,7],[31,6],[31,3],[8,4],[8,6],[8,5],[28,3],[28,1],[25,3],[25,3],[25,2],[25,1],[25,1],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,1],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,1],[48,1],[48,1],[48,1],[48,1],[48,1],[15,2],[17,2],[40,5],[9,6],[65,3],[65,1],[67,3],[67,5],[67,1],[10,5],[10,7],[10,7],[69,2],[69,3],[11,6],[11,7],[72,2],[72,1],[73,3],[73,4],[73,2],[73,3],[12,6],[12,7],[13,8],[13,9],[14,9],[14,9],[14,10],[14,10],[79,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2: case 83:
 $$[$0-1].addChild($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = new ParseNode(null, null, 'SENTENCES', 'SENTENCES', null); this.$.addChild($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 14: case 15: case 32: case 45: case 46: case 53: case 61: case 62: case 97: case 98:
 this.$ = $$[$0]; 
break;
case 12: case 13: case 36: case 60: case 80:
 this.$ = $$[$0-1]; 
break;
case 16:
 
        if($$[$0] != null){
            if($$[$0].value != null){
                if(Array.isArray($$[$0].value)){
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.childs = $$[$0].value;
                }else{
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.addChild($$[$0].value);
                }
            }else{
                this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
            } 
        }else{
            this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], util.literal.dataTypes.ANY, false, true);
        } 
    
break;
case 17:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-3], util.literal.dataTypes.ANY, true); this.$.addChild($$[$0-1]); 
break;
case 18:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.DECLARATION, $$[$0-4], util.literal.dataTypes.ANY, true); this.$.childs = [null]; 
break;
case 19:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], util.literal.dataTypes.ANY, true); this.$.childs = $$[$02]; 
break;
case 20:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], $$[$0-3], true); this.$.addChild($$[$0-1]); 
break;
case 21:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.DECLARATION, $$[$0-9], $$[$0-7], true); this.$.childs = $$[$0-2]; 
break;
case 22:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.DECLARATION, $$[$0-8], $$[$0-6], true); this.$.childs = [null]; 
break;
case 23: case 33: case 79:
 this.$ = null; 
break;
case 24:
 this.$ = new ParseNode(null, null, null, $$[$0-1], util.literal.dataTypes.ANY, false, true); 
break;
case 25:
 this.$ = new ParseNode(null, null, null, $$[$0-2], util.literal.dataTypes.ANY, false, true); 
break;
case 26:
 this.$ = new ParseNode(null, null, null, [null], util.literal.dataTypes.ANY, false, true); 
break;
case 27:
 this.$ = new ParseNode(null, null, null, $$[$0], $$[$0-1], false, false); 
break;
case 28:
 this.$ = util.literal.dataTypes.STRING; 
break;
case 29:
 this.$ = util.literal.dataTypes.BOOLEAN; 
break;
case 30:
 this.$ = util.literal.dataTypes.NUMBER; 
break;
case 31:
 this.$ = util.literal.dataTypes.VOID; 
break;
case 34:
 this.$ = $$[$0-2]; 
break;
case 35:
 this.$ = [null]; 
break;
case 37:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, $$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 38:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.ASSIGNMENT, $$[$0-5]); this.$.childs = $$[$0-2]; 
break;
case 39:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.ASSIGNMENT, $$[$0-4]); this.$.childs = [null]; 
break;
case 40: case 71:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 41: case 72:
 this.$ = []; this.$.push($$[$0]); 
break;
case 42:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OR, util.literal.operation.OR, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 43:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.AND, util.literal.operation.AND, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 44:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.NOT, util.literal.operation.NOT, null); this.$.addChild($$[$0]); 
break;
case 47:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN, util.literal.operation.LESS_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 48:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN, util.literal.operation.GREATER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 49:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN_OR_EQUAL_TO, util.literal.operation.LESS_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 50:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 51:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.JUST_AS, util.literal.operation.JUST_AS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 52:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OTHER_THAN, util.literal.operation.OTHER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 54:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.POW, util.literal.operation.POW, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 55:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MODULUS, util.literal.operation.MODULUS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 56:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DIVISION, util.literal.operation.DIVISION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 57:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MULTIPLICATION, util.literal.operation.MULTIPLICATION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 58:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.SUBTRACTION, util.literal.operation.SUBTRACTION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 59:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ADDITION, util.literal.operation.ADDITION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 63:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.VARIABLE, $$[$0], null); 
break;
case 64:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.STRING, $$[$0], null); 
break;
case 65:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NUMBER, Number($$[$0]), null); 
break;
case 66:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.BOOLEAN, ($$[$0] === 'true'), null); 
break;
case 67:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.INCREMENT, util.literal.operation.INCREMENT); this.$.addChild($$[$0-1]); 
break;
case 68:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.DECREMENT, util.literal.operation.DECREMENT); this.$.addChild($$[$0-1]); 
break;
case 69:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.TERNARY_OPERATOR, util.literal.operation.TERNARY_OPERATOR); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 70:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.TYPE_DECLARATION, $$[$0-4], util.literal.dataTypes.OBJECT); this.$.childs = $$[$0-1]; 
break;
case 73:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, null, $$[$0-2], $$[$0], false, false); 
break;
case 74:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-4], $$[$0-2], false, false); 
break;
case 75:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, null, $$[$0], util.literal.operation.ANY, false, true); 
break;
case 76:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-2]); if($$[$0] != null){ this.$.addChild($$[$0]); } 
break;
case 77:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.addChild($$[$0-2]); } let elseNode = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); if($$[$0] != null){ elseNode.addChild($$[$0]); this.$.addChild(elseNode); } 
break;
case 78:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.addChild($$[$0-2]); } let elseNode2 = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); this.$.addChild(elseNode2); this.$.addChild($$[$0]); 
break;
case 81:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH); this.$.addChild($$[$0-3]); 
break;
case 82:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 84:
 this.$ = new ParseNode(null, null, util.literal.operation.LCASES, util.literal.operation.LCASES); this.$.addChild($$[$0]); 
break;
case 85:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.CASE, util.literal.operation.CASE); 
break;
case 86:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.CASE, util.literal.operation.CASE); this.$.addChild($$[$0]); 
break;
case 87:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT); 
break;
case 88:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT); this.$.addChild($$[$0]); 
break;
case 89:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE); this.$.addChild($$[$0-3]); 
break;
case 90:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 91:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE); this.$.addChild($$[$0-2]); 
break;
case 92:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-2]); 
break;
case 93: case 94:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR, util.literal.operation.FOR); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 95: case 96:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR, util.literal.operation.FOR); this.$.addChild($$[$0-7]); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{1:[3]},{5:[1,30],6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Ve,$Vf,{16:[1,32]}),o($Ve,$Vg,{16:[1,33]}),o($Vh,[2,14]),o($Vh,[2,15]),o($Ve,$Vi,{24:$Vj}),{21:[1,35]},{55:[1,36]},{55:[1,37]},{55:[1,38]},{64:[1,39]},{55:[1,40]},{49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,60:$Vq,61:$Vr},{21:[1,49]},{21:[1,50]},{15:56,17:57,21:$Vs,25:51,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($Vu,[2,64]),o($Vu,[2,65]),o($Vu,[2,66]),{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,12]),o($Vd,[2,13]),{15:56,17:57,21:$Vs,25:59,26:[1,60],39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{24:[1,61]},{15:56,17:57,21:$Vs,25:62,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,25:63,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,25:64,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{4:66,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,65],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{7:68,8:69,18:14,19:15,20:$V0,21:[1,70],23:$V2,79:67},o($Vu,[2,67]),o($Vu,[2,68]),{15:56,17:57,21:$Vs,48:71,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,48:72,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,48:73,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,48:74,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,48:75,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,48:76,55:$V3,57:$V4,58:$V5,59:$V6},{16:[1,78],22:77,24:[1,79],29:[1,80]},{24:[1,81],29:[1,82]},{37:$Vv,38:$Vw,56:[1,83],62:$Vx},{15:56,17:57,21:$Vs,25:87,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($Vy,[2,45]),o($Vy,[2,46],{42:$Vz,43:$VA,44:$VB,45:$VC,46:[1,92],47:[1,93]}),o($VD,[2,53],{49:$Vk,50:$Vl,51:$Vm,52:$Vn,53:$Vo,54:$Vp,60:$Vq,61:$Vr}),o($Vu,$Vf),o($Vu,$Vg),o($Vu,$Vi),{16:[1,94],37:$Vv,38:$Vw,62:$Vx},{15:56,17:57,21:$Vs,25:97,27:[1,96],28:95,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{64:[1,98]},{37:$Vv,38:$Vw,56:[1,99],62:$Vx},{37:$Vv,38:$Vw,56:[1,100],62:$Vx},{37:$Vv,38:$Vw,56:[1,101],62:$Vx},{76:[1,102]},{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,103],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{15:56,17:57,21:$Vs,25:104,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($VE,[2,97]),o($VE,[2,98]),{24:$Vj},o($VF,[2,54],{49:$Vk,60:$Vq,61:$Vr}),o($VF,[2,55],{49:$Vk,60:$Vq,61:$Vr}),o($VF,[2,56],{49:$Vk,60:$Vq,61:$Vr}),o($VF,[2,57],{49:$Vk,60:$Vq,61:$Vr}),o($VG,[2,58],{49:$Vk,50:$Vl,51:$Vm,52:$Vn,60:$Vq,61:$Vr}),o($VG,[2,59],{49:$Vk,50:$Vl,51:$Vm,52:$Vn,60:$Vq,61:$Vr}),o($Vh,[2,16]),o($Vh,[2,23]),{15:56,17:57,21:$Vs,25:105,26:[1,106],39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{21:$VH,30:107,32:$VI,33:$VJ,34:$VK,35:$VL},{15:56,17:57,21:$Vs,25:113,26:[1,114],39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{21:$VH,30:115,32:$VI,33:$VJ,34:$VK,35:$VL},o($Vu,[2,60]),{15:56,17:57,21:$Vs,25:116,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,25:117,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,25:118,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($Vy,[2,44]),{15:56,17:57,21:$Vs,41:119,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,41:120,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,41:121,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,41:122,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,41:123,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,41:124,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($Vh,[2,37]),{27:[1,125],36:$VM},{16:[1,127]},o($VN,[2,41],{37:$Vv,38:$Vw,62:$Vx}),{21:$VO,65:128,67:129},{64:$VP,69:131},{64:[1,133]},{64:[1,134]},{55:[1,135]},{76:[1,136]},{16:[1,137],37:$Vv,38:$Vw,62:$Vx},{16:[1,138],37:$Vv,38:$Vw,62:$Vx},{15:56,17:57,21:$Vs,25:97,27:[1,140],28:139,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{16:[1,142],24:[1,144],26:[1,143],31:141},o($VQ,[2,28]),o($VQ,[2,29]),o($VQ,[2,30]),o($VQ,[2,31]),o($VQ,[2,32]),{16:[1,145],37:$Vv,38:$Vw,62:$Vx},{15:56,17:57,21:$Vs,25:97,27:[1,146],28:147,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{24:[1,148],26:[1,149]},o([16,27,29,36,37,56,62],[2,42],{38:$Vw}),o($Vy,[2,43]),{29:[1,150],37:$Vv,38:$Vw,62:$Vx},o($VD,[2,47]),o($VD,[2,48]),o($VD,[2,49]),o($VD,[2,50]),o($VR,[2,51],{42:$Vz,43:$VA,44:$VB,45:$VC}),o($VR,[2,52],{42:$Vz,43:$VA,44:$VB,45:$VC}),{16:[1,151]},{15:56,17:57,21:$Vs,25:152,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($Vh,[2,39]),{36:[1,154],66:[1,153]},o($VS,[2,72]),o($VS,[2,75],{29:[1,155]}),o($Vd,[2,76],{70:[1,156]}),{4:158,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,157],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{66:[1,159],72:160,73:161,74:$VT,75:$VU},{4:165,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,164],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{15:56,17:57,21:$Vs,25:166,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{55:[1,167]},{15:168,17:169,21:$Vs,48:23,55:$V3,57:$V4,58:$V5,59:$V6},o($Vh,[2,24]),{27:[1,170],36:$VM},{16:[1,171]},o($Vh,[2,27]),o($Vh,[2,33]),{27:[1,172]},{15:56,17:57,21:$Vs,25:173,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($Vh,[2,17]),{16:[1,174]},{27:[1,175],36:$VM},{15:56,17:57,21:$Vs,25:176,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{27:[1,177]},{15:56,17:57,21:$Vs,25:178,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($Vh,[2,38]),o($VN,[2,40],{37:$Vv,38:$Vw,62:$Vx}),o($Vd,[2,70]),{21:$VO,67:179},{21:$VH,30:180,32:$VI,33:$VJ,34:$VK,35:$VL},{10:182,64:$VP,68:$V8,69:181},o($VV,[2,79]),{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,183],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},o($Vd,[2,81]),{66:[1,184],73:185,74:$VT,75:$VU},o($VW,[2,84]),{15:56,17:57,21:$Vs,25:186,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{29:[1,187]},o($Vd,[2,89]),{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,188],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{37:$Vv,38:$Vw,56:[1,189],62:$Vx},{15:56,17:57,21:$Vs,25:190,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($Ve,$Vf,{56:[1,191]}),o($Ve,$Vg,{56:[1,192]}),{16:[1,193]},o($Vh,[2,26]),{24:[1,194]},{16:[1,195],37:$Vv,38:$Vw,62:$Vx},o($Vh,[2,18]),{16:[1,196]},{16:[1,197],37:$Vv,38:$Vw,62:$Vx},{24:[1,198]},o([16,27,29,36,56],[2,69],{37:$Vv,38:$Vw,62:$Vx}),o($VS,[2,71]),o($VS,[2,73],{26:[1,199]}),o($Vd,[2,77]),o($Vd,[2,78]),o($VV,[2,80]),o($Vd,[2,82]),o($VW,[2,83]),{29:[1,200],37:$Vv,38:$Vw,62:$Vx},o($VW,[2,87],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,48:23,4:201,20:$V0,21:$V1,23:$V2,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc}),o($Vd,[2,90]),{16:[1,202]},{37:$Vv,38:$Vw,56:[1,203],62:$Vx},{64:[1,204]},{64:[1,205]},o($Vh,[2,25]),{26:[1,206]},o($Vh,[2,36]),o($Vh,[2,19]),o($Vh,[2,20]),{26:[1,207]},{27:[1,208]},o($VW,[2,85],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,48:23,4:209,20:$V0,21:$V1,23:$V2,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc}),o($VW,[2,88],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,48:23,6:31,20:$V0,21:$V1,23:$V2,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc}),o($Vd,[2,91]),{16:[1,210]},{4:212,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,211],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{4:214,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,213],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{15:56,17:57,21:$Vs,25:97,27:[1,216],28:215,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},{15:56,17:57,21:$Vs,25:97,27:[1,218],28:217,39:$Vt,40:53,41:54,48:55,55:$V3,57:$V4,58:$V5,59:$V6},o($VS,[2,74]),o($VW,[2,86],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,48:23,6:31,20:$V0,21:$V1,23:$V2,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc}),o($Vd,[2,92]),o($Vd,[2,93]),{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,219],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},o($Vd,[2,94]),{6:31,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:$V0,21:$V1,23:$V2,48:23,55:$V3,57:$V4,58:$V5,59:$V6,63:$V7,66:[1,220],68:$V8,71:$V9,76:$Va,77:$Vb,78:$Vc},{27:[1,221],36:$VM},{16:[1,222]},{27:[1,223],36:$VM},{16:[1,224]},o($Vd,[2,95]),o($Vd,[2,96]),{16:[1,225]},o($Vh,[2,35]),{16:[1,226]},o($Vh,[2,22]),o($Vh,[2,34]),o($Vh,[2,21])],
defaultActions: {30:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const ParseNode = require('../models/ParseNode').default;
    const util = require('../utilities/util');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* SKIP COMMENT */
break;
case 2:/* SKIP COMMENT */
break;
case 3:return 20;
break;
case 4:return 63;
break;
case 5:return 23;
break;
case 6:return 'CONSOLE';
break;
case 7:return 68;
break;
case 8:return 70;
break;
case 9:return 71;
break;
case 10:return 74;
break;
case 11:return 75;
break;
case 12:return 76;
break;
case 13:return 77;
break;
case 14:return 78;
break;
case 15:return 'LOG';
break;
case 16:return 32;
break;
case 17:return 34;
break;
case 18:return 33;
break;
case 19:return 35;
break;
case 20:return 59;
break;
case 21:return 21;
break;
case 22:return 58;
break;
case 23:return 46;
break;
case 24:return 47;
break;
case 25:return 44;
break;
case 26:return 45;
break;
case 27:return 60;
break;
case 28:return 61;
break;
case 29:return 24;
break;
case 30:return 55;
break;
case 31:return 56;
break;
case 32:return 64;
break;
case 33:return 66;
break;
case 34:return 26;
break;
case 35:return 27;
break;
case 36:return 29;
break;
case 37:return 36;
break;
case 38:return 16;
break;
case 39:return 'POINT';
break;
case 40:return 49;
break;
case 41:return 52;
break;
case 42:return 51;
break;
case 43:return 53;
break;
case 44:return 54;
break;
case 45:return 50;
break;
case 46:return 62;
break;
case 47:return 42;
break;
case 48:return 43;
break;
case 49:return 38;
break;
case 50:return 37;
break;
case 51:return 39;
break;
case 52:this.begin("chain");
break;
case 53:return 57;
break;
case 54:this.popState();
break;
case 55:this.begin("chain_simp");
break;
case 56:return 57;
break;
case 57:this.popState();
break;
case 58:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]+)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:let\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:log\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:(true|false))/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:[0-9]+\.?[0-9]*)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\?)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\n]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\n]+)/,/^(?:['])/,/^(?:$)/],
conditions: {"chain_simp":{"rules":[56,57],"inclusive":false},"chain":{"rules":[53,54],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}