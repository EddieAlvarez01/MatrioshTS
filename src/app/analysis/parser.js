/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,32],$V1=[1,21],$V2=[1,33],$V3=[1,40],$V4=[1,35],$V5=[1,37],$V6=[1,38],$V7=[1,39],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,30],$Vf=[1,31],$Vg=[5,25,26,28,45,61,64,65,66,70,73,75,78,81,82,83,84,85,90,92],$Vh=[43,44,48,49,50,51,52,53,55,56,57,58,59,60,67,68,69,89],$Vi=[2,70],$Vj=[2,71],$Vk=[2,73],$Vl=[2,74],$Vm=[1,50],$Vn=[1,49],$Vo=[2,54],$Vp=[16,29,32,34,42,43,44,48,49,50,51,52,53,62,69,89],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,58],$Vx=[1,59],$Vy=[1,71],$Vz=[1,72],$VA=[1,73],$VB=[1,70],$VC=[1,79],$VD=[16,29,32,34,42,43,44,48,49,50,51,52,53,55,56,57,58,59,60,62,67,68,69,89],$VE=[16,29,32,34,42,43,44,62,69,89],$VF=[1,81],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[1,114],$VK=[1,115],$VL=[1,116],$VM=[16,29,32,34,42,43,44,62,69],$VN=[1,134],$VO=[32,42,62],$VP=[26,45,61,64,65,66],$VQ=[16,29,32,34,42,43,44,48,49,50,51,52,53,56,57,58,59,60,62,69,89],$VR=[16,29,32,34,42,43,44,48,49,50,51,52,53,59,60,62,69,89],$VS=[1,156],$VT=[1,152],$VU=[1,153],$VV=[1,154],$VW=[1,155],$VX=[16,29,32,34,42,43,44,52,53,62,69,89],$VY=[1,168],$VZ=[1,170],$V_=[16,29,31,42,73],$V$=[42,73],$V01=[1,203],$V11=[1,204],$V21=[5,25,26,28,45,61,64,65,66,70,73,75,77,78,81,82,83,84,85,90,92],$V31=[73,81,82],$V41=[55,56,57,58,59,60,67,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"LSENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,"ASSIGNMENT":8,"TYPE_DECLARATION":9,"STATEMENT_IF":10,"STATEMENT_SWITCH":11,"STATEMENT_WHILE":12,"DO_WHILE":13,"STATEMENT_FOR":14,"INCREMENT":15,"SEMICOLON":16,"DECREMENT":17,"FOR_IN":18,"FOR_OF":19,"FUNCTION_CALL":20,"PRINT":21,"GRAPH_TS":22,"VARLET":23,"VARCONST":24,"LET":25,"IDENTIFIER":26,"ENDLET":27,"CONST":28,"EQUAL":29,"EXPL":30,"LBRACKET":31,"RBRACKET":32,"LEXPL":33,"COLON":34,"DATATYPE":35,"ENDDECLARATION":36,"TSTRING":37,"TBOOLEAN":38,"TNUMBER":39,"TVOID":40,"PROPERTY_ACCESS":41,"COMMA":42,"OR":43,"AND":44,"NOT":45,"TERNARY":46,"EXPR":47,"LESSTHAN":48,"GREATERTHAN":49,"LESSTHANOREQUALTO":50,"GREATERTHANOREQUALTO":51,"JUSTAS":52,"OTHERTHAN":53,"EXP":54,"POW":55,"MODULUSSIGN":56,"DIVISIONSIGN":57,"PORSIGN":58,"MINUSSIGN":59,"PLUSSIGN":60,"LPAREN":61,"RPAREN":62,"ARRAY_ACCESS":63,"CHAIN":64,"NUMBER":65,"BOOLEAN":66,"INCREMENTSIGN":67,"DECREMENTSIGN":68,"QUESTIONINGSIGN":69,"TYPE":70,"LBRACE":71,"LPARAMETERS":72,"RBRACE":73,"PARAMETERS":74,"IF":75,"BODY_IF":76,"ELSE":77,"SWITCH":78,"LCASES":79,"CASES":80,"CASE":81,"DEFAULT":82,"WHILE":83,"DO":84,"FOR":85,"FOR_PARAMETER1":86,"IN":87,"OF":88,"POINT":89,"CONSOLE":90,"LOG":91,"GRAPH":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SEMICOLON",25:"LET",26:"IDENTIFIER",28:"CONST",29:"EQUAL",31:"LBRACKET",32:"RBRACKET",34:"COLON",37:"TSTRING",38:"TBOOLEAN",39:"TNUMBER",40:"TVOID",42:"COMMA",43:"OR",44:"AND",45:"NOT",48:"LESSTHAN",49:"GREATERTHAN",50:"LESSTHANOREQUALTO",51:"GREATERTHANOREQUALTO",52:"JUSTAS",53:"OTHERTHAN",55:"POW",56:"MODULUSSIGN",57:"DIVISIONSIGN",58:"PORSIGN",59:"MINUSSIGN",60:"PLUSSIGN",61:"LPAREN",62:"RPAREN",64:"CHAIN",65:"NUMBER",66:"BOOLEAN",67:"INCREMENTSIGN",68:"DECREMENTSIGN",69:"QUESTIONINGSIGN",70:"TYPE",71:"LBRACE",73:"RBRACE",75:"IF",77:"ELSE",78:"SWITCH",81:"CASE",82:"DEFAULT",83:"WHILE",84:"DO",85:"FOR",87:"IN",88:"OF",89:"POINT",90:"CONSOLE",91:"LOG",92:"GRAPH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[7,1],[7,1],[23,3],[24,5],[24,6],[24,7],[24,7],[24,11],[24,10],[27,1],[27,3],[27,5],[27,4],[27,3],[35,1],[35,1],[35,1],[35,1],[35,1],[36,1],[36,7],[36,6],[36,3],[8,4],[8,6],[8,5],[8,4],[8,6],[8,5],[33,3],[33,1],[30,3],[30,3],[30,2],[30,1],[30,1],[30,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,1],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[15,2],[17,2],[46,5],[9,6],[72,3],[72,1],[74,3],[74,5],[74,1],[10,5],[10,7],[10,7],[76,2],[76,3],[11,6],[11,7],[79,2],[79,1],[80,3],[80,4],[80,2],[80,3],[12,6],[12,7],[13,8],[13,9],[14,9],[14,9],[14,10],[14,10],[86,1],[86,1],[18,10],[18,9],[19,9],[19,10],[63,4],[20,3],[20,4],[41,3],[21,7],[22,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2: case 94:
 $$[$0-1].addChild($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = new ParseNode(null, null, 'SENTENCES', 'SENTENCES', null); this.$.addChild($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 14: case 15: case 17: case 18: case 19: case 20: case 37: case 53: case 54: case 55: case 62: case 70: case 71: case 72: case 73: case 108: case 109:
 this.$ = $$[$0]; 
break;
case 12: case 13: case 16: case 41: case 69: case 91:
 this.$ = $$[$0-1]; 
break;
case 21:
 
        if($$[$0] != null){
            if($$[$0].value != null){
                if(Array.isArray($$[$0].value)){
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.childs = $$[$0].value;
                }else{
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.addChild($$[$0].value);
                }
            }else{
                this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
            } 
        }else{
            this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], util.literal.dataTypes.ANY, false, true);
        } 
    
break;
case 22:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-3], util.literal.dataTypes.ANY, true); this.$.addChild($$[$0-1]); 
break;
case 23:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.DECLARATION, $$[$0-4], util.literal.dataTypes.ANY, true); this.$.childs = [null]; 
break;
case 24:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], util.literal.dataTypes.ANY, true); this.$.childs = $$[$02]; 
break;
case 25:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], $$[$0-3], true); this.$.addChild($$[$0-1]); 
break;
case 26:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.DECLARATION, $$[$0-9], $$[$0-7], true); this.$.childs = $$[$0-2]; 
break;
case 27:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.DECLARATION, $$[$0-8], $$[$0-6], true); this.$.childs = [null]; 
break;
case 28: case 38: case 90:
 this.$ = null; 
break;
case 29:
 this.$ = new ParseNode(null, null, null, $$[$0-1], util.literal.dataTypes.ANY, false, true); 
break;
case 30:
 this.$ = new ParseNode(null, null, null, $$[$0-2], util.literal.dataTypes.ANY, false, true); 
break;
case 31:
 this.$ = new ParseNode(null, null, null, [null], util.literal.dataTypes.ANY, false, true); 
break;
case 32:
 this.$ = new ParseNode(null, null, null, $$[$0], $$[$0-1], false, false); 
break;
case 33:
 this.$ = util.literal.dataTypes.STRING; 
break;
case 34:
 this.$ = util.literal.dataTypes.BOOLEAN; 
break;
case 35:
 this.$ = util.literal.dataTypes.NUMBER; 
break;
case 36:
 this.$ = util.literal.dataTypes.VOID; 
break;
case 39:
 this.$ = $$[$0-2]; 
break;
case 40:
 this.$ = [null]; 
break;
case 42:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, $$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 43:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.ASSIGNMENT, $$[$0-5]); this.$.childs = $$[$0-2]; 
break;
case 44:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.ASSIGNMENT, $$[$0-4]); this.$.childs = [null]; 
break;
case 45:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, util.literal.operation.ASSIGNMENT); this.$.addChild($$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 46:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.ASSIGNMENT, $$[$0-5]); const lexpl = new ParseNode(null, null, util.literal.operation.LEXPL, util.literal.operation.LEXPL); lexpl.childs = $$[$0-2]; this.$.addChild($$[$0-5]); this.$.addChild(lexpl); 
break;
case 47:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.ASSIGNMENT, util.literal.operation.ASSIGNMENT); this.$.addChild($$[$0-4]); 
break;
case 48: case 82:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 49: case 83:
 this.$ = []; this.$.push($$[$0]); 
break;
case 50:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OR, util.literal.operation.OR, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 51:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.AND, util.literal.operation.AND, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 52:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.NOT, util.literal.operation.NOT, null); this.$.addChild($$[$0]); 
break;
case 56:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN, util.literal.operation.LESS_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 57:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN, util.literal.operation.GREATER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 58:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN_OR_EQUAL_TO, util.literal.operation.LESS_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 59:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 60:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.JUST_AS, util.literal.operation.JUST_AS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 61:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OTHER_THAN, util.literal.operation.OTHER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 63:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.POW, util.literal.operation.POW, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 64:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MODULUS, util.literal.operation.MODULUS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 65:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DIVISION, util.literal.operation.DIVISION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 66:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MULTIPLICATION, util.literal.operation.MULTIPLICATION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 67:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.SUBTRACTION, util.literal.operation.SUBTRACTION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 68:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ADDITION, util.literal.operation.ADDITION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 74:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.VARIABLE, $$[$0], null); 
break;
case 75:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.STRING, $$[$0], null); 
break;
case 76:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NUMBER, Number($$[$0]), null); 
break;
case 77:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.BOOLEAN, ($$[$0] === 'true'), null); 
break;
case 78:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.INCREMENT, util.literal.operation.INCREMENT); this.$.addChild($$[$0-1]); 
break;
case 79:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.DECREMENT, util.literal.operation.DECREMENT); this.$.addChild($$[$0-1]); 
break;
case 80:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.TERNARY_OPERATOR, util.literal.operation.TERNARY_OPERATOR); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 81:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.TYPE_DECLARATION, $$[$0-4], util.literal.dataTypes.OBJECT); this.$.childs = $$[$0-1]; 
break;
case 84:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, null, $$[$0-2], $$[$0], false, false); 
break;
case 85:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-4], $$[$0-2], false, false); 
break;
case 86:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, null, $$[$0], util.literal.operation.ANY, false, true); 
break;
case 87:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-2]); if($$[$0] != null){ this.$.addChild($$[$0]); } 
break;
case 88:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.addChild($$[$0-2]); } let elseNode = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); if($$[$0] != null){ elseNode.addChild($$[$0]); this.$.addChild(elseNode); } 
break;
case 89:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.addChild($$[$0-2]); } let elseNode2 = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); this.$.addChild(elseNode2); this.$.addChild($$[$0]); 
break;
case 92:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH); this.$.addChild($$[$0-3]); 
break;
case 93:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 95:
 this.$ = new ParseNode(null, null, util.literal.operation.LCASES, util.literal.operation.LCASES); this.$.addChild($$[$0]); 
break;
case 96:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.CASE, util.literal.operation.CASE); 
break;
case 97:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.CASE, util.literal.operation.CASE); this.$.addChild($$[$0]); 
break;
case 98:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT); 
break;
case 99:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT); this.$.addChild($$[$0]); 
break;
case 100:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE); this.$.addChild($$[$0-3]); 
break;
case 101:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 102:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE); this.$.addChild($$[$0-2]); 
break;
case 103:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-2]); 
break;
case 104: case 105:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR, util.literal.operation.FOR); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 106: case 107:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR, util.literal.operation.FOR); this.$.addChild($$[$0-7]); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 110:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN); this.$.addChild(new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.DECLARATION, $$[$0-6])); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 111:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN); this.$.addChild(new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5])); this.$.addChild($$[$0-3]); 
break;
case 112:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF); this.$.addChild(new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5])); this.$.addChild($$[$0-3]); 
break;
case 113:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF); this.$.addChild(new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.DECLARATION, $$[$0-6])); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 114:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ARRAY_ACCESS, $$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 115:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.FUNCTION_CALL, $$[$0-2]); 
break;
case 116:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.FUNCTION_CALL, $$[$0-3]); this.$.childs = $$[$0-1]; 
break;
case 117:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.PROPERTY_ACCESS, util.literal.operation.PROPERTY_ACCESS); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 118:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.PRINT, util.literal.operation.PRINT); this.$.addChild($$[$0-2]); 
break;
case 119:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.GRAPH_TS, util.literal.operation.GRAPH_TS); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{1:[3]},{5:[1,43],6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vh,$Vi,{16:[1,45]}),o($Vh,$Vj,{16:[1,46]}),o($Vg,[2,14]),o($Vg,[2,15]),o($Vh,$Vk,{16:[1,47]}),o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),o($Vg,[2,20]),o($Vh,$Vl,{29:[1,48],31:$Vm,61:$Vn}),o([43,44,69,89],$Vo,{29:[1,51]}),{26:[1,52]},{61:[1,53]},{61:[1,54]},{61:[1,55]},{71:[1,56]},{61:[1,57]},o($Vp,[2,62],{55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,67:$Vw,68:$Vx}),{89:[1,66]},{61:[1,67]},{26:[1,68]},{26:[1,69]},{43:$Vy,44:$Vz,69:$VA,89:$VB},{15:76,17:77,20:78,26:$VC,30:74,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},o($VD,[2,72]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),{15:76,17:77,20:78,26:$VC,30:80,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},o($VE,[2,53]),o($VE,[2,55],{48:$VF,49:$VG,50:$VH,51:$VI,52:[1,85],53:[1,86]}),{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,16]),{15:76,17:77,20:78,26:$VC,30:87,31:[1,88],41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:91,33:90,41:75,45:$V3,46:41,47:42,54:29,61:$V4,62:[1,89],63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,54:92,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:93,31:[1,94],41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{29:[1,95]},{15:76,17:77,20:78,26:$VC,30:96,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:97,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:98,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{4:100,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,99],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{7:103,8:104,15:76,17:77,20:78,23:19,24:20,25:[1,102],26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,86:101},o($VD,[2,78]),o($VD,[2,79]),{15:76,17:77,20:78,26:$VC,54:105,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,54:106,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,54:107,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,54:108,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,54:109,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,54:110,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{91:[1,111]},{62:[1,112]},{16:$VJ,27:113,29:$VK,34:$VL},{29:[1,117],34:[1,118]},{15:76,17:77,20:78,26:$VC,30:119,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:120,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:121,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:122,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{43:$Vy,44:$Vz,62:[1,123],69:$VA,89:$VB},o($VE,$Vo),o($VD,$Vi),o($VD,$Vj),o($VD,$Vk),o($VD,$Vl,{31:$Vm,61:$Vn}),o($VM,[2,52],{89:$VB}),{15:76,17:77,20:78,26:$VC,47:124,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,47:125,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,47:126,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,47:127,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,47:128,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,47:129,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{16:[1,130],43:$Vy,44:$Vz,69:$VA,89:$VB},{15:76,17:77,20:78,26:$VC,30:91,32:[1,132],33:131,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},o($VD,[2,115]),{42:$VN,62:[1,133]},o($VO,[2,49],{43:$Vy,44:$Vz,69:$VA,89:$VB}),{32:[1,135],55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,67:$Vw,68:$Vx},{16:[1,136],43:$Vy,44:$Vz,69:$VA,89:$VB},{15:76,17:77,20:78,26:$VC,30:91,32:[1,138],33:137,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{71:[1,139]},{43:$Vy,44:$Vz,62:[1,140],69:$VA,89:$VB},{43:$Vy,44:$Vz,62:[1,141],69:$VA,89:$VB},{43:$Vy,44:$Vz,62:[1,142],69:$VA,89:$VB},{83:[1,143]},{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,144],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{15:76,17:77,20:78,26:$VC,30:145,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{26:[1,146]},o($VP,[2,108]),o($VP,[2,109]),o($VQ,[2,63],{55:$Vq,67:$Vw,68:$Vx}),o($VQ,[2,64],{55:$Vq,67:$Vw,68:$Vx}),o($VQ,[2,65],{55:$Vq,67:$Vw,68:$Vx}),o($VQ,[2,66],{55:$Vq,67:$Vw,68:$Vx}),o($VR,[2,67],{55:$Vq,56:$Vr,57:$Vs,58:$Vt,67:$Vw,68:$Vx}),o($VR,[2,68],{55:$Vq,56:$Vr,57:$Vs,58:$Vt,67:$Vw,68:$Vx}),{61:[1,147]},{16:[1,148]},o($Vg,[2,21]),o($Vg,[2,28]),{15:76,17:77,20:78,26:$VC,30:149,31:[1,150],41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{26:$VS,35:151,37:$VT,38:$VU,39:$VV,40:$VW},{15:76,17:77,20:78,26:$VC,30:157,31:[1,158],41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{26:$VS,35:159,37:$VT,38:$VU,39:$VV,40:$VW},o($VE,[2,117]),o([16,29,32,34,42,43,62,69],[2,50],{44:$Vz,89:$VB}),o($VM,[2,51],{89:$VB}),{34:[1,160],43:$Vy,44:$Vz,69:$VA,89:$VB},o($VD,[2,69]),o($Vp,[2,56]),o($Vp,[2,57]),o($Vp,[2,58]),o($Vp,[2,59]),o($VX,[2,60],{48:$VF,49:$VG,50:$VH,51:$VI}),o($VX,[2,61],{48:$VF,49:$VG,50:$VH,51:$VI}),o($Vg,[2,42]),{32:[1,161],42:$VN},{16:[1,162]},o($VD,[2,116]),{15:76,17:77,20:78,26:$VC,30:163,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},o($VD,[2,114]),o($Vg,[2,45]),{32:[1,164],42:$VN},{16:[1,165]},{26:$VY,72:166,74:167},{71:$VZ,76:169},{71:[1,171]},{71:[1,172]},{61:[1,173]},{83:[1,174]},{16:[1,175],43:$Vy,44:$Vz,69:$VA,89:$VB},{16:$VJ,27:113,29:$VK,34:$VL,87:[1,176],88:[1,177]},{15:76,17:77,20:78,26:$VC,30:178,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},o($Vg,[2,119]),{16:[1,179],43:$Vy,44:$Vz,69:$VA,89:$VB},{15:76,17:77,20:78,26:$VC,30:91,32:[1,181],33:180,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{16:[1,183],29:[1,185],31:[1,184],36:182},o($V_,[2,33]),o($V_,[2,34]),o($V_,[2,35]),o($V_,[2,36]),o($V_,[2,37]),{16:[1,186],43:$Vy,44:$Vz,69:$VA,89:$VB},{15:76,17:77,20:78,26:$VC,30:91,32:[1,187],33:188,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{29:[1,189],31:[1,190]},{15:76,17:77,20:78,26:$VC,30:191,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{16:[1,192]},o($Vg,[2,44]),o($VO,[2,48],{43:$Vy,44:$Vz,69:$VA,89:$VB}),{16:[1,193]},o($Vg,[2,47]),{42:[1,195],73:[1,194]},o($V$,[2,83]),o($V$,[2,86],{34:[1,196]}),o($Vg,[2,87],{77:[1,197]}),{4:199,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,198],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{73:[1,200],79:201,80:202,81:$V01,82:$V11},{4:206,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,205],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{15:76,17:77,20:78,26:$VC,30:207,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{61:[1,208]},{15:209,17:210,20:78,26:$VC,54:211,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:212,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:213,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{43:$Vy,44:$Vz,62:[1,214],69:$VA,89:$VB},o($Vg,[2,29]),{32:[1,215],42:$VN},{16:[1,216]},o($Vg,[2,32]),o($Vg,[2,38]),{32:[1,217]},{15:76,17:77,20:78,26:$VC,30:218,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},o($Vg,[2,22]),{16:[1,219]},{32:[1,220],42:$VN},{15:76,17:77,20:78,26:$VC,30:221,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{32:[1,222]},o([16,29,32,34,42,62],[2,80],{43:$Vy,44:$Vz,69:$VA,89:$VB}),o($Vg,[2,43]),o($Vg,[2,46]),o($Vg,[2,81]),{26:$VY,74:223},{26:$VS,35:224,37:$VT,38:$VU,39:$VV,40:$VW},{10:226,71:$VZ,75:$V9,76:225},o($V21,[2,90]),{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,227],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},o($Vg,[2,92]),{73:[1,228],80:229,81:$V01,82:$V11},o($V31,[2,95]),{15:76,17:77,20:78,26:$VC,30:230,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{34:[1,231]},o($Vg,[2,100]),{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,232],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{43:$Vy,44:$Vz,62:[1,233],69:$VA,89:$VB},{15:76,17:77,20:78,26:$VC,30:234,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},o($V41,$Vi,{62:[1,235]}),o($V41,$Vj,{62:[1,236]}),{55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,67:$Vw,68:$Vx},{43:$Vy,44:$Vz,62:[1,237],69:$VA,89:$VB},{43:$Vy,44:$Vz,62:[1,238],69:$VA,89:$VB},{16:[1,239]},{16:[1,240]},o($Vg,[2,31]),{29:[1,241]},{16:[1,242],43:$Vy,44:$Vz,69:$VA,89:$VB},o($Vg,[2,23]),{16:[1,243]},{16:[1,244],43:$Vy,44:$Vz,69:$VA,89:$VB},{29:[1,245]},o($V$,[2,82]),o($V$,[2,84],{31:[1,246]}),o($Vg,[2,88]),o($Vg,[2,89]),o($V21,[2,91]),o($Vg,[2,93]),o($V31,[2,94]),{34:[1,247],43:$Vy,44:$Vz,69:$VA,89:$VB},o($V31,[2,98],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,41:22,54:29,30:34,63:36,46:41,47:42,4:248,25:$V0,26:$V1,28:$V2,45:$V3,61:$V4,64:$V5,65:$V6,66:$V7,70:$V8,75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf}),o($Vg,[2,101]),{16:[1,249]},{43:$Vy,44:$Vz,62:[1,250],69:$VA,89:$VB},{71:[1,251]},{71:[1,252]},{71:[1,253]},{71:[1,254]},o($Vg,[2,118]),o($Vg,[2,30]),{31:[1,255]},o($Vg,[2,41]),o($Vg,[2,24]),o($Vg,[2,25]),{31:[1,256]},{32:[1,257]},o($V31,[2,96],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,41:22,54:29,30:34,63:36,46:41,47:42,4:258,25:$V0,26:$V1,28:$V2,45:$V3,61:$V4,64:$V5,65:$V6,66:$V7,70:$V8,75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf}),o($V31,[2,99],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,41:22,54:29,30:34,63:36,46:41,47:42,6:44,25:$V0,26:$V1,28:$V2,45:$V3,61:$V4,64:$V5,65:$V6,66:$V7,70:$V8,75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf}),o($Vg,[2,102]),{16:[1,259]},{4:261,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,260],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,262],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{4:264,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,265],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{4:267,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,266],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{15:76,17:77,20:78,26:$VC,30:91,32:[1,269],33:268,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},{15:76,17:77,20:78,26:$VC,30:91,32:[1,271],33:270,41:75,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7},o($V$,[2,85]),o($V31,[2,97],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,41:22,54:29,30:34,63:36,46:41,47:42,6:44,25:$V0,26:$V1,28:$V2,45:$V3,61:$V4,64:$V5,65:$V6,66:$V7,70:$V8,75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf}),o($Vg,[2,103]),o($Vg,[2,104]),{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,272],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},o($Vg,[2,105]),{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,273],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,274],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},o($Vg,[2,111]),o($Vg,[2,112]),{6:44,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V0,26:$V1,28:$V2,30:34,41:22,45:$V3,46:41,47:42,54:29,61:$V4,63:36,64:$V5,65:$V6,66:$V7,70:$V8,73:[1,275],75:$V9,78:$Va,83:$Vb,84:$Vc,85:$Vd,90:$Ve,92:$Vf},{32:[1,276],42:$VN},{16:[1,277]},{32:[1,278],42:$VN},{16:[1,279]},o($Vg,[2,106]),o($Vg,[2,107]),o($Vg,[2,110]),o($Vg,[2,113]),{16:[1,280]},o($Vg,[2,40]),{16:[1,281]},o($Vg,[2,27]),o($Vg,[2,39]),o($Vg,[2,26])],
defaultActions: {43:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const ParseNode = require('../models/ParseNode').default;
    const util = require('../utilities/util');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* SKIP COMMENT */
break;
case 2:/* SKIP COMMENT */
break;
case 3:return 25;
break;
case 4:return 70;
break;
case 5:return 28;
break;
case 6:return 90;
break;
case 7:return 75;
break;
case 8:return 77;
break;
case 9:return 78;
break;
case 10:return 81;
break;
case 11:return 82;
break;
case 12:return 83;
break;
case 13:return 84;
break;
case 14:return 92;
break;
case 15:return 85;
break;
case 16:return 91;
break;
case 17:return 87;
break;
case 18:return 88;
break;
case 19:return 37;
break;
case 20:return 39;
break;
case 21:return 38;
break;
case 22:return 40;
break;
case 23:return 66;
break;
case 24:return 26;
break;
case 25:return 65;
break;
case 26:return 52;
break;
case 27:return 53;
break;
case 28:return 50;
break;
case 29:return 51;
break;
case 30:return 67;
break;
case 31:return 68;
break;
case 32:return 29;
break;
case 33:return 61;
break;
case 34:return 62;
break;
case 35:return 71;
break;
case 36:return 73;
break;
case 37:return 31;
break;
case 38:return 32;
break;
case 39:return 34;
break;
case 40:return 42;
break;
case 41:return 16;
break;
case 42:return 89;
break;
case 43:return 55;
break;
case 44:return 58;
break;
case 45:return 57;
break;
case 46:return 59;
break;
case 47:return 60;
break;
case 48:return 56;
break;
case 49:return 69;
break;
case 50:return 48;
break;
case 51:return 49;
break;
case 52:return 44;
break;
case 53:return 43;
break;
case 54:return 45;
break;
case 55:this.begin("chain");
break;
case 56:return 64;
break;
case 57:this.popState();
break;
case 58:this.begin("chain_simp");
break;
case 59:return 64;
break;
case 60:this.popState();
break;
case 61:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]+)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:let\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:graficar_ts\b)/,/^(?:for\b)/,/^(?:log\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:(true|false))/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:[0-9]+\.?[0-9]*)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\?)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\n]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\n]+)/,/^(?:['])/,/^(?:$)/],
conditions: {"chain_simp":{"rules":[59,60],"inclusive":false},"chain":{"rules":[56,57],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}