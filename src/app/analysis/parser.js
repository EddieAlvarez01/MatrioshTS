/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,41],$V2=[1,26],$V3=[1,42],$V4=[1,54],$V5=[1,51],$V6=[1,43],$V7=[1,46],$V8=[1,47],$V9=[1,48],$Va=[1,49],$Vb=[1,28],$Vc=[1,55],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[2,5,29,30,32,37,49,65,69,70,71,72,77,78,80,82,85,88,89,90,91,92,98,100,101,102,103],$Vo=[47,48,52,53,54,55,56,57,59,60,61,62,63,64,74,75,76,97],$Vp=[2,65],$Vq=[2,66],$Vr=[2,68],$Vs=[2,125],$Vt=[2,70],$Vu=[1,62],$Vv=[1,64],$Vw=[1,63],$Vx=[2,49],$Vy=[16,33,35,38,46,47,48,52,53,54,55,56,57,66,76,80,97],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,72],$VG=[1,73],$VH=[1,91],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,92],$VM=[16,33,35,38,46,47,48,52,53,54,55,56,57,59,60,61,62,63,64,66,74,75,76,80,97],$VN=[16,33,35,38,46,47,48,66,76,80,97],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[1,146],$VT=[1,147],$VU=[1,149],$VV=[16,33,35,38,46,47,48,66,76,80],$VW=[1,159],$VX=[38,46,66],$VY=[30,37,49,65,69,70,71,72,78],$VZ=[16,33,35,38,46,47,48,52,53,54,55,56,57,60,61,62,63,64,66,76,80,97],$V_=[16,33,35,38,46,47,48,52,53,54,55,56,57,63,64,66,76,80,97],$V$=[1,191],$V01=[1,187],$V11=[1,188],$V21=[1,189],$V31=[1,190],$V41=[16,33,35,38,46,47,48,56,57,66,76,80,97],$V51=[1,199],$V61=[1,201],$V71=[95,96],$V81=[1,219],$V91=[1,221],$Va1=[16,33,37,46,80,95,96],$Vb1=[1,223],$Vc1=[46,80],$Vd1=[1,235],$Ve1=[1,236],$Vf1=[2,5,29,30,32,37,49,65,69,70,71,72,77,78,80,82,84,85,88,89,90,91,92,98,100,101,102,103],$Vg1=[80,88,89],$Vh1=[59,60,61,62,63,64,74,75],$Vi1=[1,278],$Vj1=[1,281];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"LSENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,"ASSIGNMENT":8,"TYPE_DECLARATION":9,"STATEMENT_IF":10,"STATEMENT_SWITCH":11,"STATEMENT_WHILE":12,"DO_WHILE":13,"STATEMENT_FOR":14,"INCREMENT":15,"SEMICOLON":16,"DECREMENT":17,"FOR_IN":18,"FOR_OF":19,"FUNCTION_CALL":20,"PRINT":21,"GRAPH_TS":22,"STATEMENT_BREAK":23,"STATEMENT_CONTINUE":24,"STATEMENT_RETURN":25,"ARRAY_FUNCTIONS":26,"VARLET":27,"VARCONST":28,"LET":29,"IDENTIFIER":30,"ENDLET":31,"CONST":32,"EQUAL":33,"EXPL":34,"COLON":35,"DATATYPE":36,"LBRACKET":37,"RBRACKET":38,"ENDDECLARATION":39,"TSTRING":40,"TBOOLEAN":41,"TNUMBER":42,"TVOID":43,"PROPERTY_ACCESS":44,"LEXPL":45,"COMMA":46,"OR":47,"AND":48,"NOT":49,"TERNARY":50,"EXPR":51,"LESSTHAN":52,"GREATERTHAN":53,"LESSTHANOREQUALTO":54,"GREATERTHANOREQUALTO":55,"JUSTAS":56,"OTHERTHAN":57,"EXP":58,"POW":59,"MODULUSSIGN":60,"DIVISIONSIGN":61,"PORSIGN":62,"MINUSSIGN":63,"PLUSSIGN":64,"LPAREN":65,"RPAREN":66,"ARRAY_ACCESS":67,"ARRAY":68,"CHAIN":69,"NUMBER":70,"BOOLEAN":71,"NULL":72,"DEFINITION":73,"INCREMENTSIGN":74,"DECREMENTSIGN":75,"QUESTIONINGSIGN":76,"TYPE":77,"LBRACE":78,"LPARAMETERS":79,"RBRACE":80,"PARAMETERS":81,"IF":82,"BODY_IF":83,"ELSE":84,"SWITCH":85,"LCASES":86,"CASES":87,"CASE":88,"DEFAULT":89,"WHILE":90,"DO":91,"FOR":92,"FOR_PARAMETER1":93,"FOR_IN_P1":94,"IN":95,"OF":96,"POINT":97,"CONSOLE":98,"LOG":99,"GRAPH":100,"BREAK":101,"CONTINUE":102,"RETURN":103,"LVALUES":104,"PUSH":105,"POP":106,"LENGTH":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SEMICOLON",29:"LET",30:"IDENTIFIER",32:"CONST",33:"EQUAL",35:"COLON",37:"LBRACKET",38:"RBRACKET",40:"TSTRING",41:"TBOOLEAN",42:"TNUMBER",43:"TVOID",46:"COMMA",47:"OR",48:"AND",49:"NOT",52:"LESSTHAN",53:"GREATERTHAN",54:"LESSTHANOREQUALTO",55:"GREATERTHANOREQUALTO",56:"JUSTAS",57:"OTHERTHAN",59:"POW",60:"MODULUSSIGN",61:"DIVISIONSIGN",62:"PORSIGN",63:"MINUSSIGN",64:"PLUSSIGN",65:"LPAREN",66:"RPAREN",69:"CHAIN",70:"NUMBER",71:"BOOLEAN",72:"NULL",74:"INCREMENTSIGN",75:"DECREMENTSIGN",76:"QUESTIONINGSIGN",77:"TYPE",78:"LBRACE",80:"RBRACE",82:"IF",84:"ELSE",85:"SWITCH",88:"CASE",89:"DEFAULT",90:"WHILE",91:"DO",92:"FOR",95:"IN",96:"OF",97:"POINT",98:"CONSOLE",99:"LOG",100:"GRAPH",101:"BREAK",102:"CONTINUE",103:"RETURN",105:"PUSH",106:"POP",107:"LENGTH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[7,1],[7,1],[27,3],[28,5],[28,7],[28,9],[31,1],[31,3],[31,3],[36,1],[36,1],[36,1],[36,1],[36,1],[39,1],[39,5],[39,3],[8,4],[8,4],[45,3],[45,1],[34,3],[34,3],[34,2],[34,1],[34,1],[34,1],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,1],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[15,2],[17,2],[50,5],[9,6],[79,3],[79,1],[81,3],[81,5],[81,1],[10,5],[10,7],[10,7],[83,2],[83,3],[11,6],[11,7],[86,2],[86,1],[87,3],[87,4],[87,2],[87,3],[12,6],[12,7],[13,8],[13,9],[14,9],[14,9],[14,10],[14,10],[93,1],[93,1],[18,9],[18,9],[18,8],[18,8],[94,2],[94,4],[94,6],[94,2],[94,4],[94,6],[19,8],[19,8],[19,9],[19,9],[67,4],[20,3],[20,4],[44,1],[44,3],[21,7],[22,4],[23,2],[24,2],[25,2],[25,3],[73,3],[104,5],[104,3],[68,2],[68,3],[26,6],[26,5],[26,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2:
 if($$[$0]){ $$[$0-1].addChild($$[$0]); $$[$0-1].traduction += `\n${$$[$0].traduction}`; } this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = new ParseNode(null, null, 'SENTENCES', 'SENTENCES', null, null, null, ''); if($$[$0]){ this.$.addChild($$[$0]); this.$.traduction = $$[$0].traduction } 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 14: case 15: case 17: case 18: case 19: case 20: case 21: case 24: case 25: case 37: case 48: case 49: case 50: case 57: case 65: case 66: case 67: case 68: case 69: case 75: case 106: case 107: case 125:
 this.$ = $$[$0]; 
break;
case 12: case 13:
 $$[$0-1].traduction += ';'; this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = $$[$0-1]; 
break;
case 22:
 this.$.traduction += ';'; this.$ = $$[$0-1]; 
break;
case 23:
 if(yytext != ';'){ errors.push(new ErrorClass(util.literal.errorType.SEMANTIC, `Error de sintaxis '${yytext}'`, this._$.first_line, this._$.first_column)); } this.$ = null; 
break;
case 26:
 
        if($$[$0] != null){
            if($$[$0].value != null){
                if(Array.isArray($$[$0].value)){
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic, `let ${$$[$0-1]}${$$[$0].traduction}`);
                    this.$.childs = $$[$0].value;
                }else{
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic, `let ${$$[$0-1]}${$$[$0].traduction}`);
                    this.$.addChild($$[$0].value);
                }
            }else{
                this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic, `let ${$$[$0-1]}${$$[$0].traduction}`);
            } 
        }else{
            this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], util.literal.dataTypes.ANY, false, true, `let ${$$[$0-1]};`);
        } 
    
break;
case 27:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-3], util.literal.dataTypes.ANY, true, null, `const ${$$[$0-3]} = ${$$[$0-1].traduction};`); this.$.addChild($$[$0-1]); 
break;
case 28:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], $$[$0-3], true, null, `const ${$$[$0-5]}: ${$$[$0-3]} = ${$$[$0-1].traduction};`, false); this.$.addChild($$[$0-1]); 
break;
case 29:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.DECLARATION, $$[$0-7], $$[$0-5], true, null, `const ${$$[$0-7]}: ${$$[$0-5]}[] = ${$$[$0-1].traduction};`, true); this.$.addChild($$[$0-1]); 
break;
case 30: case 38: case 88:
 this.$ = null; 
break;
case 31:
 this.$ = new ParseNode(null, null, null, $$[$0-1], util.literal.dataTypes.ANY, false, true, ` = ${$$[$0-1].traduction};`); 
break;
case 32:
 this.$ = new ParseNode(null, null, null, $$[$0], $$[$0-1], false, false); if($$[$0]){ this.$.traduction = `: ${$$[$0-1]}${$$[$0].traduction}`; this.$.array = $$[$0].array; }else{ this.$.traduction = ';'; this.$.array = $$[$0].array; } 
break;
case 33:
 this.$ = util.literal.dataTypes.STRING; 
break;
case 34:
 this.$ = util.literal.dataTypes.BOOLEAN; 
break;
case 35:
 this.$ = util.literal.dataTypes.NUMBER; 
break;
case 36:
 this.$ = util.literal.dataTypes.VOID; 
break;
case 39:
 this.$ = $$[$0-1]; this.$.array = true; this.$.traduction = `[] = ${$$[$0-1].traduction}`; 
break;
case 40:
 this.$ = $$[$0-1]; this.$.array = false; this.$.traduction = ` = ${$$[$0-1].traduction};`; 
break;
case 41:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, $$[$0-3], null, null, null, `${$$[$0-3]} = ${$$[$0-1].traduction};`); this.$.addChild($$[$0-1]); 
break;
case 42:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, util.literal.operation.ASSIGNMENT, null, null, null, `${$$[$0-3].traduction} = ${$$[$0-1].traduction};`); this.$.addChild($$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 43:
 $$[$0].traduction = `, ${$$[$0].traduction}`; $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 44:
 this.$ = []; this.$.push($$[$0]); 
break;
case 45:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OR, util.literal.operation.OR, null, null, null, `${$$[$0-2].traduction} || ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 46:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.AND, util.literal.operation.AND, null, null, null, `${$$[$0-2].traduction} && ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 47:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.NOT, util.literal.operation.NOT, null, null, null, `!${$$[$0].traduction}`); this.$.addChild($$[$0]); 
break;
case 51:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN, util.literal.operation.LESS_THAN, null, null, null, `${$$[$0-2].traduction} < ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 52:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN, util.literal.operation.GREATER_THAN, null, null, null, `${$$[$0-2].traduction} > ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 53:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN_OR_EQUAL_TO, util.literal.operation.LESS_THAN_OR_EQUAL_TO, null, null, null, `${$$[$0-2].traduction} <= ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 54:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, null, null, null, `${$$[$0-2].traduction} >= ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 55:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.JUST_AS, util.literal.operation.JUST_AS, null, null, null, `${$$[$0-2].traduction} == ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 56:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OTHER_THAN, util.literal.operation.OTHER_THAN, null, null, null, `${$$[$0-2].traduction} != ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 58:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.POW, util.literal.operation.POW, null, null, null, `${$$[$0-2].traduction} ** ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 59:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MODULUS, util.literal.operation.MODULUS, null, null, null, `${$$[$0-2].traduction} % ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 60:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DIVISION, util.literal.operation.DIVISION, null, null, null, `${$$[$0-2].traduction} / ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 61:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MULTIPLICATION, util.literal.operation.MULTIPLICATION, null, null, null, `${$$[$0-2].traduction} * ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 62:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.SUBTRACTION, util.literal.operation.SUBTRACTION, null, null, null, `${$$[$0-2].traduction} - ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 63:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ADDITION, util.literal.operation.ADDITION, null, null, null, `${$$[$0-2].traduction} + ${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 64:
 this.$ = $$[$0-1]; this.$.traduction = `(${$$[$0-1].traduction})`; 
break;
case 70:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.VARIABLE, $$[$0], null, null, null, $$[$0]); 
break;
case 71:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.STRING, $$[$0], null, null, null, `'${$$[$0]}'`); 
break;
case 72:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NUMBER, Number($$[$0]), null, null, null, $$[$0]); 
break;
case 73:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.BOOLEAN, ($$[$0] === 'true'), null, null, null, $$[$0]); 
break;
case 74:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NULL, undefined, null, null, null, $$[$0]); 
break;
case 76:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.INCREMENT, util.literal.operation.INCREMENT, null, null, null, `${$$[$0-1].traduction}++`); this.$.addChild($$[$0-1]); 
break;
case 77:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.DECREMENT, util.literal.operation.DECREMENT, null, null, null, `${$$[$0-1].traduction}--`); this.$.addChild($$[$0-1]); 
break;
case 78:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.TERNARY_OPERATOR, util.literal.operation.TERNARY_OPERATOR, null, null, null, `${$$[$0-4].traduction} ? ${$$[$0-2].traduction} : ${$$[$0].traduction}`); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 79:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.TYPE_DECLARATION, $$[$0-4], util.literal.dataTypes.OBJECT, null, null, `type ${$$[$0-4]} = {\n${ConcatInstructions($$[$0-1])}\n}`); this.$.childs = $$[$0-1]; 
break;
case 80:
 $$[$0].traduction = `,\n\t${$$[$0].traduction}`; $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 81:
 this.$ = []; $$[$0].traduction = `\t${$$[$0].traduction}`; this.$.push($$[$0]); 
break;
case 82:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, null, $$[$0-2], $$[$0], false, false, `${$$[$0-2]}: ${$$[$0]}`); 
break;
case 83:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-4], $$[$0-2], false, false, `${$$[$0-4]}: ${$$[$0-2]}[]`); 
break;
case 84:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, null, $$[$0], util.literal.operation.ANY, false, true, `${$$[$0]}`); 
break;
case 85:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.IF, util.literal.operation.IF, null, null, null,`if(${$$[$0-2].traduction})`); this.$.addChild($$[$0-2]); if($$[$0] != null){ this.$.traduction += $$[$0].traduction; this.$.addChild($$[$0]); }else{ this.$.traduction += '{\n}'; } 
break;
case 86:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF, null, null, null, `if(${$$[$0-4].traduction})`); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.traduction += $$[$0-2].traduction + 'else'; this.$.addChild($$[$0-2]); }else{ this.$.traduction += '{\n}else'; } let elseNode = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); if($$[$0] != null){ this.$.traduction += $$[$0].traduction; elseNode.addChild($$[$0]); this.$.addChild(elseNode); }else{ this.$.traduction += '{\n}'; } 
break;
case 87:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF, null, null, null, `if(${$$[$0-4].traduction})`); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.traduction += $$[$0-2].traduction + 'else '; this.$.addChild($$[$0-2]); }else{ this.$.traduction += '{\n}else '; } let elseNode2 = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); this.$.addChild(elseNode2); this.$.traduction += $$[$0].traduction; this.$.addChild($$[$0]); 
break;
case 89:
 this.$ = $$[$0-1]; this.$.traduction = `{\n\t${$$[$0-1].traduction}\n}`; 
break;
case 90:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH, null, null, null, `switch(${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-3]); 
break;
case 91:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH, null, null, null, `switch(${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 92:
 $$[$0-1].traduction += '\n' + $$[$0].traduction; $$[$0-1].addChild($$[$0]); this.$ = $$[$0-1]; 
break;
case 93:
 this.$ = new ParseNode(null, null, util.literal.operation.LCASES, util.literal.operation.LCASES, null, null, null, $$[$0].traduction); this.$.addChild($$[$0]); 
break;
case 94:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.CASE, util.literal.operation.CASE, null, null, null, `\tcase ${$$[$0-1].traduction}:`); 
break;
case 95:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.CASE, util.literal.operation.CASE, null, null, null, `\tcase ${$$[$0-2].traduction}:\n\t${$$[$0].traduction}`); this.$.addChild($$[$0]); 
break;
case 96:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT, null, null, null, `\tdefault:`); 
break;
case 97:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT, null, null, null, `\tdefault:\n\t${$$[$0].traduction}`); this.$.addChild($$[$0]); 
break;
case 98:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE, null, null, null, `while(${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-3]); 
break;
case 99:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE, null, null, null, `while(${$$[$0-4].traduction}){\n\t${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 100:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE, null, null, null, `do{\n}while(${$$[$0-2].traduction});`); this.$.addChild($$[$0-2]); 
break;
case 101:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE, null, null, null, `do{\n${$$[$0-6].traduction}\n}while(${$$[$0-2].traduction});`); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-2]); 
break;
case 102: case 103:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR, util.literal.operation.FOR, null, null, null, `for(${$$[$0-6].traduction} ${$$[$0-5].traduction}; ${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 104: case 105:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR, util.literal.operation.FOR, null, null, null, `for(${$$[$0-7].traduction} ${$$[$0-6].traduction}; ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-7]); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 108:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN, null, null, null, `for(${$$[$0-6].traduction} in ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 109:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN, null, null, null, `for(${$$[$0-6]} in ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild(new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.dataTypes.VARIABLE, $$[$0-6])); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 110:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN, null, null, null, `for(${$$[$0-5].traduction} in ${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 111:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN, null, null, null, `for(${$$[$0-5]} in ${$$[$0-3].traduction}){\n}`); this.$.addChild(new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.dataTypes.VARIABLE, $$[$0-5])); this.$.addChild($$[$0-3]); 
break;
case 112:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0], util.literal.dataTypes.ANY, false, true, `let ${$$[$0]}`); 
break;
case 113:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-2], util.literal.dataTypes.ANY, false, true, `let ${$$[$0-2]}: ${$$[$0]}`); 
break;
case 114:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-4], util.literal.dataTypes.ANY, false, true, `let ${$$[$0-4]}: ${$$[$0-2]}[]`); 
break;
case 115:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0], util.literal.dataTypes.ANY, false, true, `const ${$$[$0]}`); 
break;
case 116:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-2], util.literal.dataTypes.ANY, false, true, `const ${$$[$0-2]}: ${$$[$0]}`); 
break;
case 117:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-4], util.literal.dataTypes.ANY, false, true, `const ${$$[$0-4]}: ${$$[$0-2]}[]`); 
break;
case 118:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF, null, null, null, `for(${$$[$0-5].traduction} of ${$$[$0-3].traduction}){\n}`); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 119:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF, null, null, null, `for(${$$[$0-5]} of ${$$[$0-3].traduction}){\n}`); this.$.addChild(new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.dataTypes.VARIABLE, $$[$0-5])); this.$.addChild($$[$0-3]); 
break;
case 120:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF, null, null, null, `for(${$$[$0-6].traduction} in ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 121:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF, null, null, null, `for(${$$[$0-6]} in ${$$[$0-4].traduction}){\n${$$[$0-1].traduction}\n}`); this.$.addChild(new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.dataTypes.VARIABLE, $$[$0-6])); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 122:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ARRAY_ACCESS, $$[$0-3], null, null, null, `${$$[$0-3]}[${$$[$0-1].traduction}]`); this.$.addChild($$[$0-1]); 
break;
case 123:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.FUNCTION_CALL, $$[$0-2], null, null, null, `${$$[$0-2]}()`); 
break;
case 124:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.FUNCTION_CALL, $$[$0-3], null, null, null, `${$$[$0-3]}(${ConcatInstructions($$[$0-1])})`); this.$.childs = $$[$0-1]; 
break;
case 126:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.PROPERTY_ACCESS, util.literal.operation.PROPERTY_ACCESS, null, null, null, `${$$[$0-2].traduction}.${$$[$0].traduction}`); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 127:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.PRINT, util.literal.operation.PRINT); this.$.addChild($$[$0-2]); 
break;
case 128:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.GRAPH_TS, util.literal.operation.GRAPH_TS); 
break;
case 129:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.BREAK, util.literal.operation.BREAK); 
break;
case 130:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.CONTINUE, util.literal.operation.CONTINUE); 
break;
case 131:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.RETURN, util.literal.operation.RETURN); 
break;
case 132:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.RETURN, util.literal.operation.RETURN); this.$.addChild($$[$0-1]); 
break;
case 133:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFINITION, util.literal.operation.DEFINITION, null, null, null, `{\n${ConcatInstructions($$[$0-1])}\n}`); this.$.childs = $$[$0-1]; 
break;
case 134:
 let decl2 = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.PROPERTY_DECLARATION, $$[$0-2], null, null, null, `,\n\t${$$[$0-2]}: ${$$[$0].traduction}`); decl2.addChild($$[$0]); $$[$0-4].push(decl2); this.$ = $$[$0-4]; 
break;
case 135:
 this.$ = []; let decl = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.PROPERTY_DECLARATION, $$[$0-2], null, null, null, `\t${$$[$0-2]}: ${$$[$0].traduction}`); decl.addChild($$[$0]); this.$.push(decl); 
break;
case 136:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ARRAY, util.literal.operation.ARRAY, null, null, null, `[]`); 
break;
case 137:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.ARRAY, util.literal.operation.ARRAY, null, null, null, `[${ConcatInstructions($$[$0-1])}]`); this.$.childs = $$[$0-1]; 
break;
case 138:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.PUSH, util.literal.operation.PUSH, null, null, null, `${$$[$0-5].traduction}.Push(${$$[$0-1].traduction})`); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-1]); 
break;
case 139:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.POP, util.literal.operation.POP, null, null, null, `${$$[$0-4].traduction}.Pop()`); this.$.addChild($$[$0-4]); 
break;
case 140:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.LENGTH, util.literal.operation.LENGTH, null, null, null, `${$$[$0-2].traduction}.Length`); this.$.addChild($$[$0-2]); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{1:[3]},{2:$V0,5:[1,56],6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vo,$Vp,{16:[1,58]}),o($Vo,$Vq,{16:[1,59]}),o($Vn,[2,14]),o($Vn,[2,15]),o($Vo,$Vr,{16:[1,60]}),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),o($Vn,[2,21]),o([33,47,48,76,97],$Vs,{16:[1,61]}),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vo,$Vt,{33:$Vu,37:$Vv,65:$Vw}),o([47,48,76,97],$Vx,{33:[1,65]}),{30:[1,66]},{65:[1,67]},{65:[1,68]},{65:[1,69]},{78:[1,70]},{65:[1,71]},o($Vy,[2,57],{59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,74:$VF,75:$VG}),{97:[1,80]},{65:[1,81]},{16:[1,82]},{16:[1,83]},{15:88,16:[1,84],17:89,20:90,26:87,30:$VH,34:85,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{47:$VI,48:$VJ,76:$VK,97:$VL},{30:[1,96]},{30:[1,97]},{15:88,17:89,20:90,26:87,30:$VH,34:98,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($VM,[2,67]),o($VM,[2,69]),o($VM,[2,71]),o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,75]),{15:88,17:89,20:90,26:87,30:$VH,34:99,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($VN,[2,48]),o($VN,[2,50],{52:$VO,53:$VP,54:$VQ,55:$VR,56:[1,104],57:[1,105]}),{15:88,17:89,20:90,26:87,30:$VH,34:108,37:$V4,38:[1,106],44:86,45:107,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{30:[1,110],104:109},{1:[2,1]},o($Vn,[2,2]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,16]),o($Vn,[2,22]),{15:88,17:89,20:90,26:87,30:$VH,34:111,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:108,37:$V4,44:86,45:113,49:$V5,50:52,51:53,58:34,65:$V6,66:[1,112],67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,58:114,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:115,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{33:[1,116]},{15:88,17:89,20:90,26:87,30:$VH,34:117,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:118,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:119,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{2:$V0,4:121,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,120],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{7:125,8:126,15:88,17:89,20:90,26:87,27:24,28:25,29:[1,127],30:[1,124],32:[1,128],34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc,93:122,94:123},o($VM,[2,76]),o($VM,[2,77]),{15:88,17:89,20:90,30:$VH,37:$V4,58:129,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,58:130,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,58:131,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,58:132,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,58:133,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,58:134,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{99:[1,135]},{66:[1,136]},o($Vn,[2,129]),o($Vn,[2,130]),o($Vn,[2,131]),{16:[1,137],47:$VI,48:$VJ,76:$VK,97:$VL},o($VN,$Vx),o($VN,$Vs),o($VM,$Vp),o($VM,$Vq),o($VM,$Vr),o($VM,$Vt,{37:$Vv,65:$Vw}),{15:88,17:89,20:90,26:87,30:$VH,34:141,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc,105:[1,138],106:[1,139],107:[1,140]},{15:88,17:89,20:90,26:87,30:$VH,34:142,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:143,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:144,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{16:$VS,31:145,33:$VT,35:[1,148]},{33:$VU,35:[1,150]},{47:$VI,48:$VJ,66:[1,151],76:$VK,97:$VL},o($VV,[2,47],{97:$VL}),{15:88,17:89,20:90,30:$VH,37:$V4,51:152,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,51:153,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,51:154,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,51:155,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,51:156,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,30:$VH,37:$V4,51:157,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($VM,[2,136]),{38:[1,158],46:$VW},o($VX,[2,44],{47:$VI,48:$VJ,76:$VK,97:$VL}),{46:[1,161],80:[1,160]},{35:[1,162]},{16:[1,163],47:$VI,48:$VJ,76:$VK,97:$VL},o($VM,[2,123]),{46:$VW,66:[1,164]},{38:[1,165],59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,74:$VF,75:$VG},{16:[1,166],47:$VI,48:$VJ,76:$VK,97:$VL},{78:[1,167]},{47:$VI,48:$VJ,66:[1,168],76:$VK,97:$VL},{47:$VI,48:$VJ,66:[1,169],76:$VK,97:$VL},{47:$VI,48:$VJ,66:[1,170],76:$VK,97:$VL},{90:[1,171]},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,172],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{15:88,17:89,20:90,26:87,30:$VH,34:173,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{95:[1,174],96:[1,175]},o($Vo,$Vt,{33:$Vu,37:$Vv,65:$Vw,95:[1,176],96:[1,177]}),o($VY,[2,106]),o($VY,[2,107]),{30:[1,178]},{30:[1,179]},o($VZ,[2,58],{59:$Vz,74:$VF,75:$VG}),o($VZ,[2,59],{59:$Vz,74:$VF,75:$VG}),o($VZ,[2,60],{59:$Vz,74:$VF,75:$VG}),o($VZ,[2,61],{59:$Vz,74:$VF,75:$VG}),o($V_,[2,62],{59:$Vz,60:$VA,61:$VB,62:$VC,74:$VF,75:$VG}),o($V_,[2,63],{59:$Vz,60:$VA,61:$VB,62:$VC,74:$VF,75:$VG}),{65:[1,180]},{16:[1,181]},o($Vn,[2,132]),{65:[1,182]},{65:[1,183]},o($VN,[2,140]),o($VN,[2,126]),o([16,33,35,38,46,47,66,76,80],[2,45],{48:$VJ,97:$VL}),o($VV,[2,46],{97:$VL}),{35:[1,184],47:$VI,48:$VJ,76:$VK,97:$VL},o($Vn,[2,26]),o($Vn,[2,30]),{15:88,17:89,20:90,26:87,30:$VH,34:185,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{30:$V$,36:186,40:$V01,41:$V11,42:$V21,43:$V31},{15:88,17:89,20:90,26:87,30:$VH,34:192,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{30:$V$,36:193,40:$V01,41:$V11,42:$V21,43:$V31},o($VM,[2,64]),o($Vy,[2,51]),o($Vy,[2,52]),o($Vy,[2,53]),o($Vy,[2,54]),o($V41,[2,55],{52:$VO,53:$VP,54:$VQ,55:$VR}),o($V41,[2,56],{52:$VO,53:$VP,54:$VQ,55:$VR}),o($VM,[2,137]),{15:88,17:89,20:90,26:87,30:$VH,34:194,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($VM,[2,133]),{30:[1,195]},{15:88,17:89,20:90,26:87,30:$VH,34:196,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($Vn,[2,41]),o($VM,[2,124]),o($VM,[2,122]),o($Vn,[2,42]),{30:$V51,79:197,81:198},{78:$V61,83:200},{78:[1,202]},{78:[1,203]},{65:[1,204]},{90:[1,205]},{16:[1,206],47:$VI,48:$VJ,76:$VK,97:$VL},{15:88,17:89,20:90,26:87,30:$VH,34:207,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:208,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:209,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{15:88,17:89,20:90,26:87,30:$VH,34:210,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($V71,[2,112],{31:145,16:$VS,33:$VT,35:[1,211]}),o($V71,[2,115],{33:$VU,35:[1,212]}),{15:88,17:89,20:90,26:87,30:$VH,34:213,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($Vn,[2,128]),{15:88,17:89,20:90,26:87,30:$VH,34:214,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{66:[1,215]},{15:88,17:89,20:90,26:87,30:$VH,34:216,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{16:[1,217],47:$VI,48:$VJ,76:$VK,97:$VL},{16:$V81,33:$V91,37:[1,220],39:218},o($Va1,[2,33]),o($Va1,[2,34]),o($Va1,[2,35]),o($Va1,[2,36]),o($Va1,[2,37]),{16:[1,222],47:$VI,48:$VJ,76:$VK,97:$VL},{33:$Vb1,37:[1,224]},o($VX,[2,43],{47:$VI,48:$VJ,76:$VK,97:$VL}),{35:[1,225]},o($Vc1,[2,135],{47:$VI,48:$VJ,76:$VK,97:$VL}),{46:[1,227],80:[1,226]},o($Vc1,[2,81]),o($Vc1,[2,84],{35:[1,228]}),o($Vn,[2,85],{84:[1,229]}),{2:$V0,4:231,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,230],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{80:[1,232],86:233,87:234,88:$Vd1,89:$Ve1},{2:$V0,4:238,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,237],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{15:88,17:89,20:90,26:87,30:$VH,34:239,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{65:[1,240]},{15:241,17:242,20:90,30:$VH,37:$V4,58:243,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{47:$VI,48:$VJ,66:[1,244],76:$VK,97:$VL},{47:$VI,48:$VJ,66:[1,245],76:$VK,97:$VL},{47:$VI,48:$VJ,66:[1,246],76:$VK,97:$VL},{47:$VI,48:$VJ,66:[1,247],76:$VK,97:$VL},{30:$V$,36:248,40:$V01,41:$V11,42:$V21,43:$V31},{30:$V$,36:249,40:$V01,41:$V11,42:$V21,43:$V31},{47:$VI,48:$VJ,66:[1,250],76:$VK,97:$VL},{47:$VI,48:$VJ,66:[1,251],76:$VK,97:$VL},o($VN,[2,139]),o([16,33,35,38,46,66,80],[2,78],{47:$VI,48:$VJ,76:$VK,97:$VL}),o($Vn,[2,31]),o($Vn,[2,32]),o($Vn,[2,38]),{38:[1,252]},{15:88,17:89,20:90,26:87,30:$VH,34:253,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($Vn,[2,27]),{15:88,17:89,20:90,26:87,30:$VH,34:254,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{38:[1,255]},{15:88,17:89,20:90,26:87,30:$VH,34:256,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($Vn,[2,79]),{30:$V51,81:257},{30:$V$,36:258,40:$V01,41:$V11,42:$V21,43:$V31},{10:260,78:$V61,82:$Vd,83:259},o($Vf1,[2,88]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,261],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},o($Vn,[2,90]),{80:[1,262],87:263,88:$Vd1,89:$Ve1},o($Vg1,[2,93]),{15:88,17:89,20:90,26:87,30:$VH,34:264,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{35:[1,265]},o($Vn,[2,98]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,266],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{47:$VI,48:$VJ,66:[1,267],76:$VK,97:$VL},{15:88,17:89,20:90,26:87,30:$VH,34:268,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($Vh1,$Vp,{66:[1,269]}),o($Vh1,$Vq,{66:[1,270]}),{59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,74:$VF,75:$VG},{78:[1,271]},{78:[1,272]},{78:[1,273]},{78:[1,274]},o($V71,[2,113],{39:218,16:$V81,33:$V91,37:[1,275]}),o($V71,[2,116],{33:$Vb1,37:[1,276]}),{16:[1,277]},o($VN,[2,138]),{33:$Vi1},{16:[1,279],47:$VI,48:$VJ,76:$VK,97:$VL},{16:[1,280],47:$VI,48:$VJ,76:$VK,97:$VL},{33:$Vj1},o($Vc1,[2,134],{47:$VI,48:$VJ,76:$VK,97:$VL}),o($Vc1,[2,80]),o($Vc1,[2,82],{37:[1,282]}),o($Vn,[2,86]),o($Vn,[2,87]),o($Vf1,[2,89]),o($Vn,[2,91]),o($Vg1,[2,92]),{35:[1,283],47:$VI,48:$VJ,76:$VK,97:$VL},o($Vg1,[2,96],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,44:27,58:34,34:40,67:44,68:45,73:50,50:52,51:53,4:284,2:$V0,29:$V1,30:$V2,32:$V3,37:$V4,49:$V5,65:$V6,69:$V7,70:$V8,71:$V9,72:$Va,77:$Vb,78:$Vc,82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm}),o($Vn,[2,99]),{16:[1,285]},{47:$VI,48:$VJ,66:[1,286],76:$VK,97:$VL},{78:[1,287]},{78:[1,288]},{2:$V0,4:289,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,290],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{2:$V0,4:292,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,291],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{2:$V0,4:293,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,294],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{2:$V0,4:296,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,295],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{38:[1,297]},{38:[1,298]},o($Vn,[2,127]),{15:88,17:89,20:90,26:87,30:$VH,34:299,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},o($Vn,[2,40]),o($Vn,[2,28]),{15:88,17:89,20:90,26:87,30:$VH,34:300,37:$V4,44:86,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,78:$Vc},{38:[1,301]},o($Vg1,[2,94],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,44:27,58:34,34:40,67:44,68:45,73:50,50:52,51:53,4:302,2:$V0,29:$V1,30:$V2,32:$V3,37:$V4,49:$V5,65:$V6,69:$V7,70:$V8,71:$V9,72:$Va,77:$Vb,78:$Vc,82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm}),o($Vg1,[2,97],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,44:27,58:34,34:40,67:44,68:45,73:50,50:52,51:53,6:57,2:$V0,29:$V1,30:$V2,32:$V3,37:$V4,49:$V5,65:$V6,69:$V7,70:$V8,71:$V9,72:$Va,77:$Vb,78:$Vc,82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm}),o($Vn,[2,100]),{16:[1,303]},{2:$V0,4:305,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,304],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{2:$V0,4:307,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,306],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,308],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},o($Vn,[2,110]),o($Vn,[2,118]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,309],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,310],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},o($Vn,[2,111]),o($Vn,[2,119]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,311],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},o($V71,[2,114],{33:$Vi1}),o($V71,[2,117],{33:$Vj1}),{16:[1,312],47:$VI,48:$VJ,76:$VK,97:$VL},{16:[1,313],47:$VI,48:$VJ,76:$VK,97:$VL},o($Vc1,[2,83]),o($Vg1,[2,95],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,44:27,58:34,34:40,67:44,68:45,73:50,50:52,51:53,6:57,2:$V0,29:$V1,30:$V2,32:$V3,37:$V4,49:$V5,65:$V6,69:$V7,70:$V8,71:$V9,72:$Va,77:$Vb,78:$Vc,82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm}),o($Vn,[2,101]),o($Vn,[2,102]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,314],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},o($Vn,[2,103]),{2:$V0,6:57,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:24,28:25,29:$V1,30:$V2,32:$V3,34:40,37:$V4,44:27,49:$V5,50:52,51:53,58:34,65:$V6,67:44,68:45,69:$V7,70:$V8,71:$V9,72:$Va,73:50,77:$Vb,78:$Vc,80:[1,315],82:$Vd,85:$Ve,90:$Vf,91:$Vg,92:$Vh,98:$Vi,100:$Vj,101:$Vk,102:$Vl,103:$Vm},o($Vn,[2,108]),o($Vn,[2,120]),o($Vn,[2,109]),o($Vn,[2,121]),o($Vn,[2,39]),o($Vn,[2,29]),o($Vn,[2,104]),o($Vn,[2,105])],
defaultActions: {56:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const ParseNode = require('../models/ParseNode').default;
    const ErrorClass = require('../models/Error').default;
    const util = require('../utilities/util');
    const errors = [];
    exports.errors = errors;

    //Stringing of an array
    function ConcatInstructions(childs){
        let cString = '';
        childs.forEach(item => {
            cString += item.traduction;
        });
        return cString;
    }

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* SKIP COMMENT */
break;
case 2:/* SKIP COMMENT */
break;
case 3:return 29;
break;
case 4:return 77;
break;
case 5:return 32;
break;
case 6:return 98;
break;
case 7:return 82;
break;
case 8:return 84;
break;
case 9:return 85;
break;
case 10:return 88;
break;
case 11:return 89;
break;
case 12:return 90;
break;
case 13:return 91;
break;
case 14:return 100;
break;
case 15:return 92;
break;
case 16:return 99;
break;
case 17:return 95;
break;
case 18:return 96;
break;
case 19:return 101;
break;
case 20:return 102;
break;
case 21:return 103;
break;
case 22:return 40;
break;
case 23:return 42;
break;
case 24:return 105;
break;
case 25:return 106;
break;
case 26:return 107;
break;
case 27:return 41;
break;
case 28:return 43;
break;
case 29:return 72;
break;
case 30:return 71;
break;
case 31:return 30;
break;
case 32:return 70;
break;
case 33:return 56;
break;
case 34:return 57;
break;
case 35:return 54;
break;
case 36:return 55;
break;
case 37:return 74;
break;
case 38:return 75;
break;
case 39:return 33;
break;
case 40:return 65;
break;
case 41:return 66;
break;
case 42:return 78;
break;
case 43:return 80;
break;
case 44:return 37;
break;
case 45:return 38;
break;
case 46:return 35;
break;
case 47:return 46;
break;
case 48:return 16;
break;
case 49:return 97;
break;
case 50:return 59;
break;
case 51:return 62;
break;
case 52:return 61;
break;
case 53:return 63;
break;
case 54:return 64;
break;
case 55:return 60;
break;
case 56:return 76;
break;
case 57:return 52;
break;
case 58:return 53;
break;
case 59:return 48;
break;
case 60:return 47;
break;
case 61:return 49;
break;
case 62:this.begin("chain");
break;
case 63:return 69;
break;
case 64:this.popState();
break;
case 65:this.begin("chain_simp");
break;
case 66:return 69;
break;
case 67:this.popState();
break;
case 68:return 5;
break;
case 69:
                        errors.push(new ErrorClass(util.literal.errorType.LEXICAL, `No se reconoce el token: "${yy_.yytext}"`, yy_.yylloc.first_line, yy_.yylloc.first_column));
                    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]+)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:let\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:graficar_ts\b)/,/^(?:for\b)/,/^(?:log\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Length\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:(true|false))/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:[0-9]+\.?[0-9]*)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\?)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\n]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\n]+)/,/^(?:['])/,/^(?:$)/,/^(?:.)/],
conditions: {"chain_simp":{"rules":[66,67],"inclusive":false},"chain":{"rules":[63,64],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}