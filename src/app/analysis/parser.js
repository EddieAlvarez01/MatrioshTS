/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[5,10,13],$V3=[1,21],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,33],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,38],$Ve=[1,39],$Vf=[16,19,27,28,29,45],$Vg=[1,43],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[16,19,27,28,29,32,33,34,35,36,37,45],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[16,19,27,28,29,32,33,34,35,36,37,39,40,41,42,43,45],$Vp=[14,16,17],$Vq=[1,66],$Vr=[19,27],$Vs=[16,19,27,28,29,36,37,45],$Vt=[16,19,27,28,29,32,33,34,35,36,37,42,43,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"LSENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,"VARLET":8,"VARCONST":9,"LET":10,"IDENTIFIER":11,"ENDLET":12,"CONST":13,"EQUAL":14,"EXPL":15,"SEMICOLON":16,"LBRACKET":17,"LEXPL":18,"RBRACKET":19,"COLON":20,"DATATYPE":21,"ENDDECLARATION":22,"TSTRING":23,"TBOOLEAN":24,"TNUMBER":25,"TVOID":26,"COMMA":27,"OR":28,"AND":29,"NOT":30,"EXPR":31,"LESSTHAN":32,"GREATERTHAN":33,"LESSTHANOREQUALTO":34,"GREATERTHANOREQUALTO":35,"JUSTAS":36,"OTHERTHAN":37,"EXP":38,"MODULUSSIGN":39,"DIVISIONSIGN":40,"PORSIGN":41,"MINUSSIGN":42,"PLUSSIGN":43,"LPAREN":44,"RPAREN":45,"CHAIN":46,"NUMBER":47,"BOOLEAN":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"LET",11:"IDENTIFIER",13:"CONST",14:"EQUAL",16:"SEMICOLON",17:"LBRACKET",19:"RBRACKET",20:"COLON",23:"TSTRING",24:"TBOOLEAN",25:"TNUMBER",26:"TVOID",27:"COMMA",28:"OR",29:"AND",30:"NOT",32:"LESSTHAN",33:"GREATERTHAN",34:"LESSTHANOREQUALTO",35:"GREATERTHANOREQUALTO",36:"JUSTAS",37:"OTHERTHAN",39:"MODULUSSIGN",40:"DIVISIONSIGN",41:"PORSIGN",42:"MINUSSIGN",43:"PLUSSIGN",44:"LPAREN",45:"RPAREN",46:"CHAIN",47:"NUMBER",48:"BOOLEAN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[7,1],[7,1],[8,3],[9,5],[9,7],[9,7],[9,11],[12,1],[12,3],[12,5],[12,3],[21,1],[21,1],[21,1],[21,1],[21,1],[22,1],[22,7],[22,3],[18,3],[18,1],[15,3],[15,3],[15,2],[15,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,1],[38,1],[38,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2:
 $$[$0-1].addChild($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = new ParseNode(null, null, 'SENTENCES', 'SENTENCES', null); this.$.addChild($$[$0]); 
break;
case 4: case 5: case 6: case 20: case 29: case 36:
 this.$ = $$[$0]; 
break;
case 7:
 
        if($$[$0] != null){
            if($$[$0].value != null){
                if(Array.isArray($$[$0].value)){
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.childs = $$[$0].value;
                }else{
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.addChild($$[$0].value);
                }
            }else{
                this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
            } 
        }else{
            this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], util.literal.dataTypes.ANY, false, true);
        } 
    
break;
case 8:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-3], util.literal.dataTypes.ANY, true); this.$.addChild($$[$0-1]); 
break;
case 9:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], util.literal.dataTypes.ANY, true); this.$.childs = $$[$02]; 
break;
case 10:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], $$[$0-3], true); this.$.addChild($$[$0-1]); 
break;
case 11:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.DECLARATION, $$[$0-9], $$[$0-7], true); this.$.childs = $$[$0-2]; 
break;
case 12: case 21:
 this.$ = null; 
break;
case 13:
 this.$ = new ParseNode(null, null, null, $$[$0-1], util.literal.dataTypes.ANY, false, true); 
break;
case 14:
 this.$ = new ParseNode(null, null, null, $$[$0-2], util.literal.dataTypes.ANY, false, true); 
break;
case 15:
 this.$ = new ParseNode(null, null, null, $$[$0], $$[$0-1], false, false); 
break;
case 16:
 this.$ = util.literal.dataTypes.STRING; 
break;
case 17:
 this.$ = util.literal.dataTypes.BOOLEAN; 
break;
case 18:
 this.$ = util.literal.dataTypes.NUMBER; 
break;
case 19:
 this.$ = util.literal.dataTypes.VOID; 
break;
case 22:
 this.$ = $$[$0-2]; 
break;
case 23: case 42:
 this.$ = $$[$0-1]; 
break;
case 24:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 25:
 this.$ = []; this.$.push($$[$0]); 
break;
case 26:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OR, util.literal.operation.OR, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 27:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.AND, util.literal.operation.AND, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 28:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.NOT, util.literal.operation.NOT, null); this.$.addChild($$[$0]); 
break;
case 30:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN, util.literal.operation.LESS_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 31:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN, util.literal.operation.GREATER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 32:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN_OR_EQUAL_TO, util.literal.operation.LESS_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 33:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 34:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.JUST_AS, util.literal.operation.JUST_AS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 35:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OTHER_THAN, util.literal.operation.OTHER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 37:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MODULUS, util.literal.operation.MODULUS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 38:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DIVISION, util.literal.operation.DIVISION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 39:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MULTIPLICATION, util.literal.operation.MULTIPLICATION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 40:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.SUBTRACTION, util.literal.operation.SUBTRACTION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 41:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ADDITION, util.literal.operation.ADDITION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 43:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.STRING, $$[$0], null); 
break;
case 44:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NUMBER, Number($$[$0]), null); 
break;
case 45:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.BOOLEAN, ($$[$0] === 'true'), null); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,13:$V1},{1:[3]},{5:[1,9],6:10,7:4,8:5,9:6,10:$V0,13:$V1},o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),{11:[1,11]},{11:[1,12]},{1:[2,1]},o($V2,[2,2]),{12:13,14:[1,15],16:[1,14],20:[1,16]},{14:[1,17],20:[1,18]},o($V2,[2,7]),o($V2,[2,12]),{15:19,17:[1,20],30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{11:$V8,21:28,23:$V9,24:$Va,25:$Vb,26:$Vc},{15:34,17:[1,35],30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{11:$V8,21:36,23:$V9,24:$Va,25:$Vb,26:$Vc},{16:[1,37],28:$Vd,29:$Ve},{15:41,18:40,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{15:42,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},o($Vf,[2,29],{32:$Vg,33:$Vh,34:$Vi,35:$Vj,36:[1,47],37:[1,48]}),o($Vk,[2,36],{39:$Vl,40:$Vm,41:$Vn,42:[1,52],43:[1,53]}),{15:54,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},o($Vo,[2,43]),o($Vo,[2,44]),o($Vo,[2,45]),{14:[1,58],16:[1,56],17:[1,57],22:55},o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,18]),o($Vp,[2,19]),o($Vp,[2,20]),{16:[1,59],28:$Vd,29:$Ve},{15:41,18:60,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{14:[1,61],17:[1,62]},o($V2,[2,13]),{15:63,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{15:64,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{19:[1,65],27:$Vq},o($Vr,[2,25],{28:$Vd,29:$Ve}),o($Vf,[2,28]),{31:67,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{31:68,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{31:69,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{31:70,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{31:71,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{31:72,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{38:73,44:$V4,46:$V5,47:$V6,48:$V7},{38:74,44:$V4,46:$V5,47:$V6,48:$V7},{38:75,44:$V4,46:$V5,47:$V6,48:$V7},{38:76,44:$V4,46:$V5,47:$V6,48:$V7},{38:77,44:$V4,46:$V5,47:$V6,48:$V7},{28:$Vd,29:$Ve,45:[1,78]},o($V2,[2,15]),o($V2,[2,21]),{19:[1,79]},{15:80,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},o($V2,[2,8]),{19:[1,81],27:$Vq},{15:82,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{19:[1,83]},o([16,19,27,28,45],[2,26],{29:$Ve}),o($Vf,[2,27]),{16:[1,84]},{15:85,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},o($Vk,[2,30]),o($Vk,[2,31]),o($Vk,[2,32]),o($Vk,[2,33]),o($Vs,[2,34],{32:$Vg,33:$Vh,34:$Vi,35:$Vj}),o($Vs,[2,35],{32:$Vg,33:$Vh,34:$Vi,35:$Vj}),o($Vo,[2,37]),o($Vo,[2,38]),o($Vo,[2,39]),o($Vt,[2,40],{39:$Vl,40:$Vm,41:$Vn}),o($Vt,[2,41],{39:$Vl,40:$Vm,41:$Vn}),o($Vo,[2,42]),{14:[1,86]},{16:[1,87],28:$Vd,29:$Ve},{16:[1,88]},{16:[1,89],28:$Vd,29:$Ve},{14:[1,90]},o($V2,[2,14]),o($Vr,[2,24],{28:$Vd,29:$Ve}),{17:[1,91]},o($V2,[2,23]),o($V2,[2,9]),o($V2,[2,10]),{17:[1,92]},{15:41,18:93,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{15:41,18:94,30:$V3,31:22,38:23,44:$V4,46:$V5,47:$V6,48:$V7},{19:[1,95],27:$Vq},{19:[1,96],27:$Vq},{16:[1,97]},{16:[1,98]},o($V2,[2,22]),o($V2,[2,11])],
defaultActions: {9:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const ParseNode = require('../models/ParseNode').default;
    const util = require('../utilities/util');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* SKIP COMMENT */
break;
case 2:/* SKIP COMMENT */
break;
case 3:return 10;
break;
case 4:return 13;
break;
case 5:return 'CONSOLE';
break;
case 6:return 'LOG';
break;
case 7:return 23;
break;
case 8:return 25;
break;
case 9:return 24;
break;
case 10:return 26;
break;
case 11:return 48;
break;
case 12:return 11;
break;
case 13:return 47;
break;
case 14:return 14;
break;
case 15:return 44;
break;
case 16:return 45;
break;
case 17:return 17;
break;
case 18:return 19;
break;
case 19:return 20;
break;
case 20:return 27;
break;
case 21:return 16;
break;
case 22:return 'POINT';
break;
case 23:return 41;
break;
case 24:return 40;
break;
case 25:return 42;
break;
case 26:return 43;
break;
case 27:return 'INCREMENTSIGN';
break;
case 28:return 'DECREMENTSIGN';
break;
case 29:return 39;
break;
case 30:return 32;
break;
case 31:return 33;
break;
case 32:return 34;
break;
case 33:return 35;
break;
case 34:return 36;
break;
case 35:return 37;
break;
case 36:return 29;
break;
case 37:return 28;
break;
case 38:return 30;
break;
case 39:this.begin("chain");
break;
case 40:return 46;
break;
case 41:this.popState();
break;
case 42:this.begin("chain_simp");
break;
case 43:return 46;
break;
case 44:this.popState();
break;
case 45:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]+)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:(true|false))/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:[0-9]+\.?[0-9]*)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\+\+)/,/^(?:--)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\n]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\n]+)/,/^(?:['])/,/^(?:$)/],
conditions: {"chain_simp":{"rules":[43,44],"inclusive":false},"chain":{"rules":[40,41],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}