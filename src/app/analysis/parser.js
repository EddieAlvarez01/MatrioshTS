/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,40],$V1=[1,25],$V2=[1,41],$V3=[1,53],$V4=[1,50],$V5=[1,42],$V6=[1,45],$V7=[1,46],$V8=[1,47],$V9=[1,48],$Va=[1,27],$Vb=[1,54],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[5,29,30,32,37,49,65,69,70,71,72,77,78,80,82,85,88,89,90,91,92,97,99,100,101,102],$Vn=[47,48,52,53,54,55,56,57,59,60,61,62,63,64,74,75,76,96],$Vo=[2,64],$Vp=[2,65],$Vq=[2,67],$Vr=[2,114],$Vs=[2,69],$Vt=[1,63],$Vu=[1,62],$Vv=[2,48],$Vw=[16,33,35,38,46,47,48,52,53,54,55,56,57,66,76,80,96],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,71],$VE=[1,72],$VF=[1,90],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,91],$VK=[16,33,35,38,46,47,48,52,53,54,55,56,57,59,60,61,62,63,64,66,74,75,76,80,96],$VL=[16,33,35,38,46,47,48,66,76,80,96],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[1,142],$VR=[1,143],$VS=[1,144],$VT=[16,33,35,38,46,47,48,66,76,80],$VU=[1,155],$VV=[38,46,66],$VW=[30,37,49,65,69,70,71,72,78],$VX=[16,33,35,38,46,47,48,52,53,54,55,56,57,60,61,62,63,64,66,76,80,96],$VY=[16,33,35,38,46,47,48,52,53,54,55,56,57,63,64,66,76,80,96],$VZ=[1,182],$V_=[1,178],$V$=[1,179],$V01=[1,180],$V11=[1,181],$V21=[16,33,35,38,46,47,48,56,57,66,76,80,96],$V31=[1,190],$V41=[1,192],$V51=[16,33,37,46,80],$V61=[46,80],$V71=[1,222],$V81=[1,223],$V91=[5,29,30,32,37,49,65,69,70,71,72,77,78,80,82,84,85,88,89,90,91,92,97,99,100,101,102],$Va1=[80,88,89],$Vb1=[59,60,61,62,63,64,74,75];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"LSENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,"ASSIGNMENT":8,"TYPE_DECLARATION":9,"STATEMENT_IF":10,"STATEMENT_SWITCH":11,"STATEMENT_WHILE":12,"DO_WHILE":13,"STATEMENT_FOR":14,"INCREMENT":15,"SEMICOLON":16,"DECREMENT":17,"FOR_IN":18,"FOR_OF":19,"FUNCTION_CALL":20,"PRINT":21,"GRAPH_TS":22,"STATEMENT_BREAK":23,"STATEMENT_CONTINUE":24,"STATEMENT_RETURN":25,"ARRAY_FUNCTIONS":26,"VARLET":27,"VARCONST":28,"LET":29,"IDENTIFIER":30,"ENDLET":31,"CONST":32,"EQUAL":33,"EXPL":34,"COLON":35,"DATATYPE":36,"LBRACKET":37,"RBRACKET":38,"ENDDECLARATION":39,"TSTRING":40,"TBOOLEAN":41,"TNUMBER":42,"TVOID":43,"PROPERTY_ACCESS":44,"LEXPL":45,"COMMA":46,"OR":47,"AND":48,"NOT":49,"TERNARY":50,"EXPR":51,"LESSTHAN":52,"GREATERTHAN":53,"LESSTHANOREQUALTO":54,"GREATERTHANOREQUALTO":55,"JUSTAS":56,"OTHERTHAN":57,"EXP":58,"POW":59,"MODULUSSIGN":60,"DIVISIONSIGN":61,"PORSIGN":62,"MINUSSIGN":63,"PLUSSIGN":64,"LPAREN":65,"RPAREN":66,"ARRAY_ACCESS":67,"ARRAY":68,"CHAIN":69,"NUMBER":70,"BOOLEAN":71,"NULL":72,"DEFINITION":73,"INCREMENTSIGN":74,"DECREMENTSIGN":75,"QUESTIONINGSIGN":76,"TYPE":77,"LBRACE":78,"LPARAMETERS":79,"RBRACE":80,"PARAMETERS":81,"IF":82,"BODY_IF":83,"ELSE":84,"SWITCH":85,"LCASES":86,"CASES":87,"CASE":88,"DEFAULT":89,"WHILE":90,"DO":91,"FOR":92,"FOR_PARAMETER1":93,"IN":94,"OF":95,"POINT":96,"CONSOLE":97,"LOG":98,"GRAPH":99,"BREAK":100,"CONTINUE":101,"RETURN":102,"LVALUES":103,"PUSH":104,"POP":105,"LENGTH":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SEMICOLON",29:"LET",30:"IDENTIFIER",32:"CONST",33:"EQUAL",35:"COLON",37:"LBRACKET",38:"RBRACKET",40:"TSTRING",41:"TBOOLEAN",42:"TNUMBER",43:"TVOID",46:"COMMA",47:"OR",48:"AND",49:"NOT",52:"LESSTHAN",53:"GREATERTHAN",54:"LESSTHANOREQUALTO",55:"GREATERTHANOREQUALTO",56:"JUSTAS",57:"OTHERTHAN",59:"POW",60:"MODULUSSIGN",61:"DIVISIONSIGN",62:"PORSIGN",63:"MINUSSIGN",64:"PLUSSIGN",65:"LPAREN",66:"RPAREN",69:"CHAIN",70:"NUMBER",71:"BOOLEAN",72:"NULL",74:"INCREMENTSIGN",75:"DECREMENTSIGN",76:"QUESTIONINGSIGN",77:"TYPE",78:"LBRACE",80:"RBRACE",82:"IF",84:"ELSE",85:"SWITCH",88:"CASE",89:"DEFAULT",90:"WHILE",91:"DO",92:"FOR",94:"IN",95:"OF",96:"POINT",97:"CONSOLE",98:"LOG",99:"GRAPH",100:"BREAK",101:"CONTINUE",102:"RETURN",104:"PUSH",105:"POP",106:"LENGTH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,1],[7,1],[27,3],[28,5],[28,7],[28,9],[31,1],[31,3],[31,3],[36,1],[36,1],[36,1],[36,1],[36,1],[39,1],[39,5],[39,3],[8,4],[8,4],[45,3],[45,1],[34,3],[34,3],[34,2],[34,1],[34,1],[34,1],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,1],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[15,2],[17,2],[50,5],[9,6],[79,3],[79,1],[81,3],[81,5],[81,1],[10,5],[10,7],[10,7],[83,2],[83,3],[11,6],[11,7],[86,2],[86,1],[87,3],[87,4],[87,2],[87,3],[12,6],[12,7],[13,8],[13,9],[14,9],[14,9],[14,10],[14,10],[93,1],[93,1],[18,10],[18,9],[19,9],[19,10],[67,4],[20,3],[20,4],[44,1],[44,3],[21,7],[22,4],[23,2],[24,2],[25,2],[25,3],[73,3],[103,5],[103,3],[68,2],[68,3],[26,6],[26,5],[26,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2: case 91:
 $$[$0-1].addChild($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = new ParseNode(null, null, 'SENTENCES', 'SENTENCES', null); this.$.addChild($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 14: case 15: case 17: case 18: case 19: case 20: case 21: case 23: case 24: case 36: case 47: case 48: case 49: case 56: case 64: case 65: case 66: case 67: case 68: case 74: case 105: case 106: case 114:
 this.$ = $$[$0]; 
break;
case 12: case 13: case 16: case 22: case 38: case 39: case 63: case 88:
 this.$ = $$[$0-1]; 
break;
case 25:
 
        if($$[$0] != null){
            if($$[$0].value != null){
                if(Array.isArray($$[$0].value)){
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.childs = $$[$0].value;
                }else{
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.addChild($$[$0].value);
                }
            }else{
                this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
            } 
        }else{
            this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], util.literal.dataTypes.ANY, false, true);
        } 
    
break;
case 26:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-3], util.literal.dataTypes.ANY, true); this.$.addChild($$[$0-1]); 
break;
case 27:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], $$[$0-3], true); this.$.addChild($$[$0-1]); 
break;
case 28:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.DECLARATION, $$[$0-7], $$[$0-5], true); this.$.addChild($$[$0-1]); 
break;
case 29: case 37: case 87:
 this.$ = null; 
break;
case 30:
 this.$ = new ParseNode(null, null, null, $$[$0-1], util.literal.dataTypes.ANY, false, true); 
break;
case 31:
 this.$ = new ParseNode(null, null, null, $$[$0], $$[$0-1], false, false); 
break;
case 32:
 this.$ = util.literal.dataTypes.STRING; 
break;
case 33:
 this.$ = util.literal.dataTypes.BOOLEAN; 
break;
case 34:
 this.$ = util.literal.dataTypes.NUMBER; 
break;
case 35:
 this.$ = util.literal.dataTypes.VOID; 
break;
case 40:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, $$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 41:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, util.literal.operation.ASSIGNMENT); this.$.addChild($$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 42: case 79:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 43: case 80:
 this.$ = []; this.$.push($$[$0]); 
break;
case 44:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OR, util.literal.operation.OR, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 45:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.AND, util.literal.operation.AND, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 46:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.NOT, util.literal.operation.NOT, null); this.$.addChild($$[$0]); 
break;
case 50:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN, util.literal.operation.LESS_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 51:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN, util.literal.operation.GREATER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 52:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN_OR_EQUAL_TO, util.literal.operation.LESS_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 53:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 54:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.JUST_AS, util.literal.operation.JUST_AS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 55:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OTHER_THAN, util.literal.operation.OTHER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 57:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.POW, util.literal.operation.POW, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 58:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MODULUS, util.literal.operation.MODULUS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 59:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DIVISION, util.literal.operation.DIVISION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 60:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MULTIPLICATION, util.literal.operation.MULTIPLICATION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 61:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.SUBTRACTION, util.literal.operation.SUBTRACTION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 62:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ADDITION, util.literal.operation.ADDITION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 69:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.VARIABLE, $$[$0], null); 
break;
case 70:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.STRING, $$[$0], null); 
break;
case 71:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NUMBER, Number($$[$0]), null); 
break;
case 72:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.BOOLEAN, ($$[$0] === 'true'), null); 
break;
case 73:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NULL, undefined, null); 
break;
case 75:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.INCREMENT, util.literal.operation.INCREMENT); this.$.addChild($$[$0-1]); 
break;
case 76:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.operation.DECREMENT, util.literal.operation.DECREMENT); this.$.addChild($$[$0-1]); 
break;
case 77:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.TERNARY_OPERATOR, util.literal.operation.TERNARY_OPERATOR); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 78:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.TYPE_DECLARATION, $$[$0-4], util.literal.dataTypes.OBJECT); this.$.childs = $$[$0-1]; 
break;
case 81:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, null, $$[$0-2], $$[$0], false, false); 
break;
case 82:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-4], $$[$0-2], false, false); 
break;
case 83:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, null, $$[$0], util.literal.operation.ANY, false, true); 
break;
case 84:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-2]); if($$[$0] != null){ this.$.addChild($$[$0]); } 
break;
case 85:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.addChild($$[$0-2]); } let elseNode = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); if($$[$0] != null){ elseNode.addChild($$[$0]); this.$.addChild(elseNode); } 
break;
case 86:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.addChild($$[$0-2]); } let elseNode2 = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); this.$.addChild(elseNode2); this.$.addChild($$[$0]); 
break;
case 89:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH); this.$.addChild($$[$0-3]); 
break;
case 90:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 92:
 this.$ = new ParseNode(null, null, util.literal.operation.LCASES, util.literal.operation.LCASES); this.$.addChild($$[$0]); 
break;
case 93:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.CASE, util.literal.operation.CASE); 
break;
case 94:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.CASE, util.literal.operation.CASE); this.$.addChild($$[$0]); 
break;
case 95:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT); 
break;
case 96:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT); this.$.addChild($$[$0]); 
break;
case 97:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE); this.$.addChild($$[$0-3]); 
break;
case 98:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.WHILE, util.literal.operation.WHILE); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 99:
 this.$ = new ParseNode(_$[$0-7].first_line, _$[$0-7].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE); this.$.addChild($$[$0-2]); 
break;
case 100:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.DO_WHILE, util.literal.operation.DO_WHILE); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-2]); 
break;
case 101: case 102:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR, util.literal.operation.FOR); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-3]); 
break;
case 103: case 104:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR, util.literal.operation.FOR); this.$.addChild($$[$0-7]); this.$.addChild($$[$0-6]); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 107:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN); this.$.addChild(new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.DECLARATION, $$[$0-6])); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 108:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_IN, util.literal.operation.FOR_IN); this.$.addChild(new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5])); this.$.addChild($$[$0-3]); 
break;
case 109:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF); this.$.addChild(new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5])); this.$.addChild($$[$0-3]); 
break;
case 110:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.FOR_OF, util.literal.operation.FOR_OF); this.$.addChild(new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.DECLARATION, $$[$0-6])); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 111:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ARRAY_ACCESS, $$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 112:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.FUNCTION_CALL, $$[$0-2]); 
break;
case 113:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.FUNCTION_CALL, $$[$0-3]); this.$.childs = $$[$0-1]; 
break;
case 115:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.PROPERTY_ACCESS, util.literal.operation.PROPERTY_ACCESS); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 116:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.PRINT, util.literal.operation.PRINT); this.$.addChild($$[$0-2]); 
break;
case 117:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.GRAPH_TS, util.literal.operation.GRAPH_TS); 
break;
case 118:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.BREAK, util.literal.operation.BREAK); 
break;
case 119:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.CONTINUE, util.literal.operation.CONTINUE); 
break;
case 120:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.RETURN, util.literal.operation.RETURN); 
break;
case 121:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.RETURN, util.literal.operation.RETURN); this.$.addChild($$[$0-1]); 
break;
case 122:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFINITION, util.literal.operation.DEFINITION); this.$.childs = $$[$0-1]; 
break;
case 123:
 let decl2 = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.PROPERTY_DECLARATION, $$[$0-2]); decl2.addChild($$[$0]); $$[$0-4].push(decl2); this.$ = $$[$0-4]; 
break;
case 124:
 this.$ = []; let decl = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.PROPERTY_DECLARATION, $$[$0-2]); decl.addChild($$[$0]); this.$.push(decl); 
break;
case 125:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ARRAY, util.literal.operation.ARRAY); 
break;
case 126:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.ARRAY, util.literal.operation.ARRAY); this.$.childs = $$[$0-1]; 
break;
case 127:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.PUSH, util.literal.operation.PUSH); this.$.addChild($$[$0-5]); this.$.addChild($$[$0-1]); 
break;
case 128:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.POP, util.literal.operation.POP); this.$.addChild($$[$0-4]); 
break;
case 129:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.LENGTH, util.literal.operation.LENGTH); this.$.addChild($$[$0-2]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{1:[3]},{5:[1,55],6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),o($Vm,[2,8]),o($Vm,[2,9]),o($Vm,[2,10]),o($Vm,[2,11]),o($Vn,$Vo,{16:[1,57]}),o($Vn,$Vp,{16:[1,58]}),o($Vm,[2,14]),o($Vm,[2,15]),o($Vn,$Vq,{16:[1,59]}),o($Vm,[2,17]),o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,20]),o($Vm,[2,21]),o([33,47,48,76,96],$Vr,{16:[1,60]}),o($Vm,[2,23]),o($Vm,[2,24]),o($Vn,$Vs,{33:[1,61],37:$Vt,65:$Vu}),o([47,48,76,96],$Vv,{33:[1,64]}),{30:[1,65]},{65:[1,66]},{65:[1,67]},{65:[1,68]},{78:[1,69]},{65:[1,70]},o($Vw,[2,56],{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,74:$VD,75:$VE}),{96:[1,79]},{65:[1,80]},{16:[1,81]},{16:[1,82]},{15:87,16:[1,83],17:88,20:89,26:86,30:$VF,34:84,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{47:$VG,48:$VH,76:$VI,96:$VJ},{30:[1,95]},{30:[1,96]},{15:87,17:88,20:89,26:86,30:$VF,34:97,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($VK,[2,66]),o($VK,[2,68]),o($VK,[2,70]),o($VK,[2,71]),o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,74]),{15:87,17:88,20:89,26:86,30:$VF,34:98,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($VL,[2,47]),o($VL,[2,49],{52:$VM,53:$VN,54:$VO,55:$VP,56:[1,103],57:[1,104]}),{15:87,17:88,20:89,26:86,30:$VF,34:107,37:$V3,38:[1,105],44:85,45:106,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{30:[1,109],103:108},{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,16]),o($Vm,[2,22]),{15:87,17:88,20:89,26:86,30:$VF,34:110,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,26:86,30:$VF,34:107,37:$V3,44:85,45:112,49:$V4,50:51,51:52,58:33,65:$V5,66:[1,111],67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,58:113,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,26:86,30:$VF,34:114,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{33:[1,115]},{15:87,17:88,20:89,26:86,30:$VF,34:116,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,26:86,30:$VF,34:117,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,26:86,30:$VF,34:118,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{4:120,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,119],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{7:123,8:124,15:87,17:88,20:89,26:86,27:23,28:24,29:[1,122],30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb,93:121},o($VK,[2,75]),o($VK,[2,76]),{15:87,17:88,20:89,30:$VF,37:$V3,58:125,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,58:126,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,58:127,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,58:128,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,58:129,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,58:130,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{98:[1,131]},{66:[1,132]},o($Vm,[2,118]),o($Vm,[2,119]),o($Vm,[2,120]),{16:[1,133],47:$VG,48:$VH,76:$VI,96:$VJ},o($VL,$Vv),o($VL,$Vr),o($VK,$Vo),o($VK,$Vp),o($VK,$Vq),o($VK,$Vs,{37:$Vt,65:$Vu}),{15:87,17:88,20:89,26:86,30:$VF,34:137,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb,104:[1,134],105:[1,135],106:[1,136]},{15:87,17:88,20:89,26:86,30:$VF,34:138,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,26:86,30:$VF,34:139,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,26:86,30:$VF,34:140,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{16:$VQ,31:141,33:$VR,35:$VS},{33:[1,145],35:[1,146]},{47:$VG,48:$VH,66:[1,147],76:$VI,96:$VJ},o($VT,[2,46],{96:$VJ}),{15:87,17:88,20:89,30:$VF,37:$V3,51:148,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,51:149,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,51:150,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,51:151,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,51:152,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,30:$VF,37:$V3,51:153,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($VK,[2,125]),{38:[1,154],46:$VU},o($VV,[2,43],{47:$VG,48:$VH,76:$VI,96:$VJ}),{46:[1,157],80:[1,156]},{35:[1,158]},{16:[1,159],47:$VG,48:$VH,76:$VI,96:$VJ},o($VK,[2,112]),{46:$VU,66:[1,160]},{38:[1,161],59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,74:$VD,75:$VE},{16:[1,162],47:$VG,48:$VH,76:$VI,96:$VJ},{78:[1,163]},{47:$VG,48:$VH,66:[1,164],76:$VI,96:$VJ},{47:$VG,48:$VH,66:[1,165],76:$VI,96:$VJ},{47:$VG,48:$VH,66:[1,166],76:$VI,96:$VJ},{90:[1,167]},{6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,168],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{15:87,17:88,20:89,26:86,30:$VF,34:169,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{30:[1,170]},o($VW,[2,105]),o($VW,[2,106]),o($VX,[2,57],{59:$Vx,74:$VD,75:$VE}),o($VX,[2,58],{59:$Vx,74:$VD,75:$VE}),o($VX,[2,59],{59:$Vx,74:$VD,75:$VE}),o($VX,[2,60],{59:$Vx,74:$VD,75:$VE}),o($VY,[2,61],{59:$Vx,60:$Vy,61:$Vz,62:$VA,74:$VD,75:$VE}),o($VY,[2,62],{59:$Vx,60:$Vy,61:$Vz,62:$VA,74:$VD,75:$VE}),{65:[1,171]},{16:[1,172]},o($Vm,[2,121]),{65:[1,173]},{65:[1,174]},o($VL,[2,129]),o($VL,[2,115]),o([16,33,35,38,46,47,66,76,80],[2,44],{48:$VH,96:$VJ}),o($VT,[2,45],{96:$VJ}),{35:[1,175],47:$VG,48:$VH,76:$VI,96:$VJ},o($Vm,[2,25]),o($Vm,[2,29]),{15:87,17:88,20:89,26:86,30:$VF,34:176,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{30:$VZ,36:177,40:$V_,41:$V$,42:$V01,43:$V11},{15:87,17:88,20:89,26:86,30:$VF,34:183,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{30:$VZ,36:184,40:$V_,41:$V$,42:$V01,43:$V11},o($VK,[2,63]),o($Vw,[2,50]),o($Vw,[2,51]),o($Vw,[2,52]),o($Vw,[2,53]),o($V21,[2,54],{52:$VM,53:$VN,54:$VO,55:$VP}),o($V21,[2,55],{52:$VM,53:$VN,54:$VO,55:$VP}),o($VK,[2,126]),{15:87,17:88,20:89,26:86,30:$VF,34:185,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($VK,[2,122]),{30:[1,186]},{15:87,17:88,20:89,26:86,30:$VF,34:187,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($Vm,[2,40]),o($VK,[2,113]),o($VK,[2,111]),o($Vm,[2,41]),{30:$V31,79:188,81:189},{78:$V41,83:191},{78:[1,193]},{78:[1,194]},{65:[1,195]},{90:[1,196]},{16:[1,197],47:$VG,48:$VH,76:$VI,96:$VJ},{16:$VQ,31:141,33:$VR,35:$VS,94:[1,198],95:[1,199]},{15:87,17:88,20:89,26:86,30:$VF,34:200,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($Vm,[2,117]),{15:87,17:88,20:89,26:86,30:$VF,34:201,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{66:[1,202]},{15:87,17:88,20:89,26:86,30:$VF,34:203,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{16:[1,204],47:$VG,48:$VH,76:$VI,96:$VJ},{16:[1,206],33:[1,208],37:[1,207],39:205},o($V51,[2,32]),o($V51,[2,33]),o($V51,[2,34]),o($V51,[2,35]),o($V51,[2,36]),{16:[1,209],47:$VG,48:$VH,76:$VI,96:$VJ},{33:[1,210],37:[1,211]},o($VV,[2,42],{47:$VG,48:$VH,76:$VI,96:$VJ}),{35:[1,212]},o($V61,[2,124],{47:$VG,48:$VH,76:$VI,96:$VJ}),{46:[1,214],80:[1,213]},o($V61,[2,80]),o($V61,[2,83],{35:[1,215]}),o($Vm,[2,84],{84:[1,216]}),{4:218,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,217],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{80:[1,219],86:220,87:221,88:$V71,89:$V81},{4:225,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,224],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{15:87,17:88,20:89,26:86,30:$VF,34:226,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{65:[1,227]},{15:228,17:229,20:89,30:$VF,37:$V3,58:230,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,26:86,30:$VF,34:231,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{15:87,17:88,20:89,26:86,30:$VF,34:232,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{47:$VG,48:$VH,66:[1,233],76:$VI,96:$VJ},{47:$VG,48:$VH,66:[1,234],76:$VI,96:$VJ},o($VL,[2,128]),o([16,33,35,38,46,66,80],[2,77],{47:$VG,48:$VH,76:$VI,96:$VJ}),o($Vm,[2,30]),o($Vm,[2,31]),o($Vm,[2,37]),{38:[1,235]},{15:87,17:88,20:89,26:86,30:$VF,34:236,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($Vm,[2,26]),{15:87,17:88,20:89,26:86,30:$VF,34:237,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{38:[1,238]},{15:87,17:88,20:89,26:86,30:$VF,34:239,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($Vm,[2,78]),{30:$V31,81:240},{30:$VZ,36:241,40:$V_,41:$V$,42:$V01,43:$V11},{10:243,78:$V41,82:$Vc,83:242},o($V91,[2,87]),{6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,244],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($Vm,[2,89]),{80:[1,245],87:246,88:$V71,89:$V81},o($Va1,[2,92]),{15:87,17:88,20:89,26:86,30:$VF,34:247,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{35:[1,248]},o($Vm,[2,97]),{6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,249],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{47:$VG,48:$VH,66:[1,250],76:$VI,96:$VJ},{15:87,17:88,20:89,26:86,30:$VF,34:251,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($Vb1,$Vo,{66:[1,252]}),o($Vb1,$Vp,{66:[1,253]}),{59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,74:$VD,75:$VE},{47:$VG,48:$VH,66:[1,254],76:$VI,96:$VJ},{47:$VG,48:$VH,66:[1,255],76:$VI,96:$VJ},{16:[1,256]},o($VL,[2,127]),{33:[1,257]},{16:[1,258],47:$VG,48:$VH,76:$VI,96:$VJ},{16:[1,259],47:$VG,48:$VH,76:$VI,96:$VJ},{33:[1,260]},o($V61,[2,123],{47:$VG,48:$VH,76:$VI,96:$VJ}),o($V61,[2,79]),o($V61,[2,81],{37:[1,261]}),o($Vm,[2,85]),o($Vm,[2,86]),o($V91,[2,88]),o($Vm,[2,90]),o($Va1,[2,91]),{35:[1,262],47:$VG,48:$VH,76:$VI,96:$VJ},o($Va1,[2,95],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,44:26,58:33,34:39,67:43,68:44,73:49,50:51,51:52,4:263,29:$V0,30:$V1,32:$V2,37:$V3,49:$V4,65:$V5,69:$V6,70:$V7,71:$V8,72:$V9,77:$Va,78:$Vb,82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl}),o($Vm,[2,98]),{16:[1,264]},{47:$VG,48:$VH,66:[1,265],76:$VI,96:$VJ},{78:[1,266]},{78:[1,267]},{78:[1,268]},{78:[1,269]},o($Vm,[2,116]),{15:87,17:88,20:89,26:86,30:$VF,34:270,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},o($Vm,[2,39]),o($Vm,[2,27]),{15:87,17:88,20:89,26:86,30:$VF,34:271,37:$V3,44:85,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,78:$Vb},{38:[1,272]},o($Va1,[2,93],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,44:26,58:33,34:39,67:43,68:44,73:49,50:51,51:52,4:273,29:$V0,30:$V1,32:$V2,37:$V3,49:$V4,65:$V5,69:$V6,70:$V7,71:$V8,72:$V9,77:$Va,78:$Vb,82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl}),o($Va1,[2,96],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,44:26,58:33,34:39,67:43,68:44,73:49,50:51,51:52,6:56,29:$V0,30:$V1,32:$V2,37:$V3,49:$V4,65:$V5,69:$V6,70:$V7,71:$V8,72:$V9,77:$Va,78:$Vb,82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl}),o($Vm,[2,99]),{16:[1,274]},{4:276,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,275],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{4:278,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,277],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{4:279,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,280],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{4:282,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,281],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{16:[1,283],47:$VG,48:$VH,76:$VI,96:$VJ},{16:[1,284],47:$VG,48:$VH,76:$VI,96:$VJ},o($V61,[2,82]),o($Va1,[2,94],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,44:26,58:33,34:39,67:43,68:44,73:49,50:51,51:52,6:56,29:$V0,30:$V1,32:$V2,37:$V3,49:$V4,65:$V5,69:$V6,70:$V7,71:$V8,72:$V9,77:$Va,78:$Vb,82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl}),o($Vm,[2,100]),o($Vm,[2,101]),{6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,285],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($Vm,[2,102]),{6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,286],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},{6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,287],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($Vm,[2,108]),o($Vm,[2,109]),{6:56,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,26:22,27:23,28:24,29:$V0,30:$V1,32:$V2,34:39,37:$V3,44:26,49:$V4,50:51,51:52,58:33,65:$V5,67:43,68:44,69:$V6,70:$V7,71:$V8,72:$V9,73:49,77:$Va,78:$Vb,80:[1,288],82:$Vc,85:$Vd,90:$Ve,91:$Vf,92:$Vg,97:$Vh,99:$Vi,100:$Vj,101:$Vk,102:$Vl},o($Vm,[2,38]),o($Vm,[2,28]),o($Vm,[2,103]),o($Vm,[2,104]),o($Vm,[2,107]),o($Vm,[2,110])],
defaultActions: {55:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const ParseNode = require('../models/ParseNode').default;
    const util = require('../utilities/util');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* SKIP COMMENT */
break;
case 2:/* SKIP COMMENT */
break;
case 3:return 29;
break;
case 4:return 77;
break;
case 5:return 32;
break;
case 6:return 97;
break;
case 7:return 82;
break;
case 8:return 84;
break;
case 9:return 85;
break;
case 10:return 88;
break;
case 11:return 89;
break;
case 12:return 90;
break;
case 13:return 91;
break;
case 14:return 99;
break;
case 15:return 92;
break;
case 16:return 98;
break;
case 17:return 94;
break;
case 18:return 95;
break;
case 19:return 100;
break;
case 20:return 101;
break;
case 21:return 102;
break;
case 22:return 40;
break;
case 23:return 42;
break;
case 24:return 104;
break;
case 25:return 105;
break;
case 26:return 106;
break;
case 27:return 41;
break;
case 28:return 43;
break;
case 29:return 72;
break;
case 30:return 71;
break;
case 31:return 30;
break;
case 32:return 70;
break;
case 33:return 56;
break;
case 34:return 57;
break;
case 35:return 54;
break;
case 36:return 55;
break;
case 37:return 74;
break;
case 38:return 75;
break;
case 39:return 33;
break;
case 40:return 65;
break;
case 41:return 66;
break;
case 42:return 78;
break;
case 43:return 80;
break;
case 44:return 37;
break;
case 45:return 38;
break;
case 46:return 35;
break;
case 47:return 46;
break;
case 48:return 16;
break;
case 49:return 96;
break;
case 50:return 59;
break;
case 51:return 62;
break;
case 52:return 61;
break;
case 53:return 63;
break;
case 54:return 64;
break;
case 55:return 60;
break;
case 56:return 76;
break;
case 57:return 52;
break;
case 58:return 53;
break;
case 59:return 48;
break;
case 60:return 47;
break;
case 61:return 49;
break;
case 62:this.begin("chain");
break;
case 63:return 69;
break;
case 64:this.popState();
break;
case 65:this.begin("chain_simp");
break;
case 66:return 69;
break;
case 67:this.popState();
break;
case 68:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]+)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:let\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:graficar_ts\b)/,/^(?:for\b)/,/^(?:log\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:Push\b)/,/^(?:Pop\b)/,/^(?:Length\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:null\b)/,/^(?:(true|false))/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:[0-9]+\.?[0-9]*)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:\?)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\n]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\n]+)/,/^(?:['])/,/^(?:$)/],
conditions: {"chain_simp":{"rules":[66,67],"inclusive":false},"chain":{"rules":[63,64],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}