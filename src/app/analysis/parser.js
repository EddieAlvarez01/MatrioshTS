/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,11],$V2=[1,16],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[5,14,15,17,56,59,61,64,67,68],$V7=[1,32],$V8=[1,27],$V9=[1,31],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,46],$Ve=[1,47],$Vf=[1,48],$Vg=[20,22,24,31,32,33,51,55],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[1,56],$Vl=[20,22,24,31,32,33,37,38,39,40,41,42,51,55],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[20,22,24,31,32,33,37,38,39,40,41,42,44,45,46,47,48,49,51,55],$Vr=[1,76],$Vs=[1,72],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,84],$Vx=[22,31],$Vy=[1,101],$Vz=[1,103],$VA=[18,20,21,31,59],$VB=[20,22,24,31,32,33,41,42,51,55],$VC=[20,22,24,31,32,33,37,38,39,40,41,42,45,46,47,48,49,51,55],$VD=[20,22,24,31,32,33,37,38,39,40,41,42,48,49,51,55],$VE=[31,59],$VF=[1,129],$VG=[1,130],$VH=[5,14,15,17,56,59,61,63,64,67,68],$VI=[59,67,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"LSENTENCES":4,"EOF":5,"SENTENCE":6,"DECLARATION":7,"ASSIGNMENT":8,"TYPE_DECLARATION":9,"STATEMENT_IF":10,"STATEMENT_SWITCH":11,"VARLET":12,"VARCONST":13,"LET":14,"IDENTIFIER":15,"ENDLET":16,"CONST":17,"EQUAL":18,"EXPL":19,"SEMICOLON":20,"LBRACKET":21,"RBRACKET":22,"LEXPL":23,"COLON":24,"DATATYPE":25,"ENDDECLARATION":26,"TSTRING":27,"TBOOLEAN":28,"TNUMBER":29,"TVOID":30,"COMMA":31,"OR":32,"AND":33,"NOT":34,"TERNARY":35,"EXPR":36,"LESSTHAN":37,"GREATERTHAN":38,"LESSTHANOREQUALTO":39,"GREATERTHANOREQUALTO":40,"JUSTAS":41,"OTHERTHAN":42,"EXP":43,"POW":44,"MODULUSSIGN":45,"DIVISIONSIGN":46,"PORSIGN":47,"MINUSSIGN":48,"PLUSSIGN":49,"LPAREN":50,"RPAREN":51,"CHAIN":52,"NUMBER":53,"BOOLEAN":54,"QUESTIONINGSIGN":55,"TYPE":56,"LBRACE":57,"LPARAMETERS":58,"RBRACE":59,"PARAMETERS":60,"IF":61,"BODY_IF":62,"ELSE":63,"SWITCH":64,"LCASES":65,"CASES":66,"CASE":67,"DEFAULT":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"LET",15:"IDENTIFIER",17:"CONST",18:"EQUAL",20:"SEMICOLON",21:"LBRACKET",22:"RBRACKET",24:"COLON",27:"TSTRING",28:"TBOOLEAN",29:"TNUMBER",30:"TVOID",31:"COMMA",32:"OR",33:"AND",34:"NOT",37:"LESSTHAN",38:"GREATERTHAN",39:"LESSTHANOREQUALTO",40:"GREATERTHANOREQUALTO",41:"JUSTAS",42:"OTHERTHAN",44:"POW",45:"MODULUSSIGN",46:"DIVISIONSIGN",47:"PORSIGN",48:"MINUSSIGN",49:"PLUSSIGN",50:"LPAREN",51:"RPAREN",52:"CHAIN",53:"NUMBER",54:"BOOLEAN",55:"QUESTIONINGSIGN",56:"TYPE",57:"LBRACE",59:"RBRACE",61:"IF",63:"ELSE",64:"SWITCH",67:"CASE",68:"DEFAULT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[12,3],[13,5],[13,6],[13,7],[13,7],[13,11],[13,10],[16,1],[16,3],[16,5],[16,4],[16,3],[25,1],[25,1],[25,1],[25,1],[25,1],[26,1],[26,7],[26,6],[26,3],[8,4],[8,6],[8,5],[23,3],[23,1],[19,3],[19,3],[19,2],[19,1],[19,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,1],[43,1],[43,1],[43,1],[35,5],[9,6],[58,3],[58,1],[60,3],[60,5],[60,1],[10,5],[10,7],[10,7],[62,2],[62,3],[11,6],[11,7],[65,2],[65,1],[66,3],[66,4],[66,2],[66,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1] 
break;
case 2: case 74:
 $$[$0-1].addChild($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = new ParseNode(null, null, 'SENTENCES', 'SENTENCES', null); this.$.addChild($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 27: case 40: case 41: case 48:
 this.$ = $$[$0]; 
break;
case 11:
 
        if($$[$0] != null){
            if($$[$0].value != null){
                if(Array.isArray($$[$0].value)){
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.childs = $$[$0].value;
                }else{
                    this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
                    this.$.addChild($$[$0].value);
                }
            }else{
                this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], $$[$0].type, false, $$[$0].dynamic);
            } 
        }else{
            this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DECLARATION, $$[$0-1], util.literal.dataTypes.ANY, false, true);
        } 
    
break;
case 12:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.DECLARATION, $$[$0-3], util.literal.dataTypes.ANY, true); this.$.addChild($$[$0-1]); 
break;
case 13:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.DECLARATION, $$[$0-4], util.literal.dataTypes.ANY, true); this.$.childs = [null]; 
break;
case 14:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], util.literal.dataTypes.ANY, true); this.$.childs = $$[$02]; 
break;
case 15:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.DECLARATION, $$[$0-5], $$[$0-3], true); this.$.addChild($$[$0-1]); 
break;
case 16:
 this.$ = new ParseNode(_$[$0-9].first_line, _$[$0-9].first_column, util.literal.operation.DECLARATION, $$[$0-9], $$[$0-7], true); this.$.childs = $$[$0-2]; 
break;
case 17:
 this.$ = new ParseNode(_$[$0-8].first_line, _$[$0-8].first_column, util.literal.operation.DECLARATION, $$[$0-8], $$[$0-6], true); this.$.childs = [null]; 
break;
case 18: case 28: case 70:
 this.$ = null; 
break;
case 19:
 this.$ = new ParseNode(null, null, null, $$[$0-1], util.literal.dataTypes.ANY, false, true); 
break;
case 20:
 this.$ = new ParseNode(null, null, null, $$[$0-2], util.literal.dataTypes.ANY, false, true); 
break;
case 21:
 this.$ = new ParseNode(null, null, null, [null], util.literal.dataTypes.ANY, false, true); 
break;
case 22:
 this.$ = new ParseNode(null, null, null, $$[$0], $$[$0-1], false, false); 
break;
case 23:
 this.$ = util.literal.dataTypes.STRING; 
break;
case 24:
 this.$ = util.literal.dataTypes.BOOLEAN; 
break;
case 25:
 this.$ = util.literal.dataTypes.NUMBER; 
break;
case 26:
 this.$ = util.literal.dataTypes.VOID; 
break;
case 29:
 this.$ = $$[$0-2]; 
break;
case 30:
 this.$ = [null]; 
break;
case 31: case 55: case 71:
 this.$ = $$[$0-1]; 
break;
case 32:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.ASSIGNMENT, $$[$0-3]); this.$.addChild($$[$0-1]); 
break;
case 33:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.ASSIGNMENT, $$[$0-5]); this.$.childs = $$[$0-2]; 
break;
case 34:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.ASSIGNMENT, $$[$0-4]); this.$.childs = [null]; 
break;
case 35: case 62:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 36: case 63:
 this.$ = []; this.$.push($$[$0]); 
break;
case 37:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OR, util.literal.operation.OR, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 38:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.AND, util.literal.operation.AND, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 39:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.NOT, util.literal.operation.NOT, null); this.$.addChild($$[$0]); 
break;
case 42:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN, util.literal.operation.LESS_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 43:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN, util.literal.operation.GREATER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 44:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.LESS_THAN_OR_EQUAL_TO, util.literal.operation.LESS_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 45:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, util.literal.operation.GREATER_THAN_OR_EQUAL_TO, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 46:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.JUST_AS, util.literal.operation.JUST_AS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 47:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.OTHER_THAN, util.literal.operation.OTHER_THAN, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 49:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.POW, util.literal.operation.POW, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 50:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MODULUS, util.literal.operation.MODULUS, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 51:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DIVISION, util.literal.operation.DIVISION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 52:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.MULTIPLICATION, util.literal.operation.MULTIPLICATION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 53:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.SUBTRACTION, util.literal.operation.SUBTRACTION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 54:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ADDITION, util.literal.operation.ADDITION, null); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 56:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.IDENTIFIER, $$[$0], null); 
break;
case 57:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.STRING, $$[$0], null); 
break;
case 58:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.NUMBER, Number($$[$0]), null); 
break;
case 59:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, util.literal.dataTypes.BOOLEAN, ($$[$0] === 'true'), null); 
break;
case 60:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.TERNARY_OPERATOR, util.literal.operation.TERNARY_OPERATOR); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-2]); this.$.addChild($$[$0]); 
break;
case 61:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.TYPE_DECLARATION, $$[$0-4], util.literal.dataTypes.OBJECT); this.$.childs = $$[$0-1]; 
break;
case 64:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, null, $$[$0-2], $$[$0], false, false); 
break;
case 65:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, null, $$[$0-4], $$[$0-2], false, false); 
break;
case 66:
 this.$ = new ParseNode(_$[$0].first_line, _$[$0].first_column, null, $$[$0], util.literal.operation.ANY, false, true); 
break;
case 67:
 this.$ = new ParseNode(_$[$0-4].first_line, _$[$0-4].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-2]); if($$[$0] != null){ this.$.addChild($$[$0]); } 
break;
case 68:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.addChild($$[$0-2]); } let elseNode = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); if($$[$0] != null){ elseNode.addChild($$[$0]); this.$.addChild(elseNode); } 
break;
case 69:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.IF, util.literal.operation.IF); this.$.addChild($$[$0-4]); if($$[$0-2] != null){ this.$.addChild($$[$0-2]); } let elseNode2 = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.ELSE, util.literal.operation.ELSE); this.$.addChild(elseNode2); this.$.addChild($$[$0]); 
break;
case 72:
 this.$ = new ParseNode(_$[$0-5].first_line, _$[$0-5].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH); this.$.addChild($$[$0-3]); 
break;
case 73:
 this.$ = new ParseNode(_$[$0-6].first_line, _$[$0-6].first_column, util.literal.operation.SWITCH, util.literal.operation.SWITCH); this.$.addChild($$[$0-4]); this.$.addChild($$[$0-1]); 
break;
case 75:
 this.$ = new ParseNode(null, null, util.literal.operation.LCASES, util.literal.operation.LCASES); this.$.addChild($$[$0]); 
break;
case 76:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.CASE, util.literal.operation.CASE); 
break;
case 77:
 this.$ = new ParseNode(_$[$0-3].first_line, _$[$0-3].first_column, util.literal.operation.CASE, util.literal.operation.CASE); this.$.addChild($$[$0]); 
break;
case 78:
 this.$ = new ParseNode(_$[$0-1].first_line, _$[$0-1].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT); 
break;
case 79:
 this.$ = new ParseNode(_$[$0-2].first_line, _$[$0-2].first_column, util.literal.operation.DEFAULT, util.literal.operation.DEFAULT); this.$.addChild($$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,17:$V2,56:$V3,61:$V4,64:$V5},{1:[3]},{5:[1,17],6:18,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,17:$V2,56:$V3,61:$V4,64:$V5},o($V6,[2,3]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),o($V6,[2,7]),o($V6,[2,8]),o($V6,[2,9]),o($V6,[2,10]),{18:[1,19]},{15:[1,20]},{50:[1,21]},{50:[1,22]},{15:[1,23]},{15:[1,24]},{1:[2,1]},o($V6,[2,2]),{15:$V7,19:25,21:[1,26],34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{18:[1,36]},{15:$V7,19:37,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,19:38,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{16:39,18:[1,41],20:[1,40],24:[1,42]},{18:[1,43],24:[1,44]},{20:[1,45],32:$Vd,33:$Ve,55:$Vf},{15:$V7,19:51,22:[1,50],23:49,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,19:52,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},o($Vg,[2,40]),o($Vg,[2,41],{37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:[1,57],42:[1,58]}),o($Vl,[2,48],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:[1,63],49:[1,64]}),{15:$V7,19:65,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},o($Vq,[2,56]),o($Vq,[2,57]),o($Vq,[2,58]),o($Vq,[2,59]),{57:[1,66]},{32:$Vd,33:$Ve,51:[1,67],55:$Vf},{32:$Vd,33:$Ve,51:[1,68],55:$Vf},o($V6,[2,11]),o($V6,[2,18]),{15:$V7,19:69,21:[1,70],34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$Vr,25:71,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{15:$V7,19:77,21:[1,78],34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$Vr,25:79,27:$Vs,28:$Vt,29:$Vu,30:$Vv},o($V6,[2,32]),{15:$V7,19:80,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,19:81,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,19:82,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{22:[1,83],31:$Vw},{20:[1,85]},o($Vx,[2,36],{32:$Vd,33:$Ve,55:$Vf}),o($Vg,[2,39]),{15:$V7,36:86,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,36:87,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,36:88,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,36:89,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,36:90,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,36:91,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,43:92,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,43:93,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,43:94,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,43:95,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,43:96,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,43:97,50:$V9,52:$Va,53:$Vb,54:$Vc},{32:$Vd,33:$Ve,51:[1,98],55:$Vf},{15:$Vy,58:99,60:100},{57:$Vz,62:102},{57:[1,104]},{20:[1,105],32:$Vd,33:$Ve,55:$Vf},{15:$V7,19:51,22:[1,107],23:106,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{18:[1,111],20:[1,109],21:[1,110],26:108},o($VA,[2,23]),o($VA,[2,24]),o($VA,[2,25]),o($VA,[2,26]),o($VA,[2,27]),{20:[1,112],32:$Vd,33:$Ve,55:$Vf},{15:$V7,19:51,22:[1,113],23:114,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{18:[1,115],21:[1,116]},o([20,22,24,31,32,51,55],[2,37],{33:$Ve}),o($Vg,[2,38]),{24:[1,117],32:$Vd,33:$Ve,55:$Vf},{20:[1,118]},{15:$V7,19:119,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},o($V6,[2,34]),o($Vl,[2,42]),o($Vl,[2,43]),o($Vl,[2,44]),o($Vl,[2,45]),o($VB,[2,46],{37:$Vh,38:$Vi,39:$Vj,40:$Vk}),o($VB,[2,47],{37:$Vh,38:$Vi,39:$Vj,40:$Vk}),o($VC,[2,49],{44:$Vm}),o($VC,[2,50],{44:$Vm}),o($VC,[2,51],{44:$Vm}),o($VC,[2,52],{44:$Vm}),o($VD,[2,53],{44:$Vm,45:$Vn,46:$Vo,47:$Vp}),o($VD,[2,54],{44:$Vm,45:$Vn,46:$Vo,47:$Vp}),o($Vq,[2,55]),{31:[1,121],59:[1,120]},o($VE,[2,63]),o($VE,[2,66],{24:[1,122]}),o($V6,[2,67],{63:[1,123]}),{4:125,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,17:$V2,56:$V3,59:[1,124],61:$V4,64:$V5},{59:[1,126],65:127,66:128,67:$VF,68:$VG},o($V6,[2,19]),{22:[1,131],31:$Vw},{20:[1,132]},o($V6,[2,22]),o($V6,[2,28]),{22:[1,133]},{15:$V7,19:134,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},o($V6,[2,12]),{20:[1,135]},{22:[1,136],31:$Vw},{15:$V7,19:137,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{22:[1,138]},{15:$V7,19:139,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},o($V6,[2,33]),o($Vx,[2,35],{32:$Vd,33:$Ve,55:$Vf}),o($V6,[2,61]),{15:$Vy,60:140},{15:$Vr,25:141,27:$Vs,28:$Vt,29:$Vu,30:$Vv},{10:143,57:$Vz,61:$V4,62:142},o($VH,[2,70]),{6:18,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,17:$V2,56:$V3,59:[1,144],61:$V4,64:$V5},o($V6,[2,72]),{59:[1,145],66:146,67:$VF,68:$VG},o($VI,[2,75]),{15:$V7,19:147,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{24:[1,148]},{20:[1,149]},o($V6,[2,21]),{18:[1,150]},{20:[1,151],32:$Vd,33:$Ve,55:$Vf},o($V6,[2,13]),{20:[1,152]},{20:[1,153],32:$Vd,33:$Ve,55:$Vf},{18:[1,154]},o([20,22,24,31,51],[2,60],{32:$Vd,33:$Ve,55:$Vf}),o($VE,[2,62]),o($VE,[2,64],{21:[1,155]}),o($V6,[2,68]),o($V6,[2,69]),o($VH,[2,71]),o($V6,[2,73]),o($VI,[2,74]),{24:[1,156],32:$Vd,33:$Ve,55:$Vf},o($VI,[2,78],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,4:157,14:$V0,15:$V1,17:$V2,56:$V3,61:$V4,64:$V5}),o($V6,[2,20]),{21:[1,158]},o($V6,[2,31]),o($V6,[2,14]),o($V6,[2,15]),{21:[1,159]},{22:[1,160]},o($VI,[2,76],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,4:161,14:$V0,15:$V1,17:$V2,56:$V3,61:$V4,64:$V5}),o($VI,[2,79],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,6:18,14:$V0,15:$V1,17:$V2,56:$V3,61:$V4,64:$V5}),{15:$V7,19:51,22:[1,163],23:162,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},{15:$V7,19:51,22:[1,165],23:164,34:$V8,35:28,36:29,43:30,50:$V9,52:$Va,53:$Vb,54:$Vc},o($VE,[2,65]),o($VI,[2,77],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,6:18,14:$V0,15:$V1,17:$V2,56:$V3,61:$V4,64:$V5}),{22:[1,166],31:$Vw},{20:[1,167]},{22:[1,168],31:$Vw},{20:[1,169]},{20:[1,170]},o($V6,[2,30]),{20:[1,171]},o($V6,[2,17]),o($V6,[2,29]),o($V6,[2,16])],
defaultActions: {17:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const ParseNode = require('../models/ParseNode').default;
    const util = require('../utilities/util');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* SKIP COMMENT */
break;
case 2:/* SKIP COMMENT */
break;
case 3:return 14;
break;
case 4:return 56;
break;
case 5:return 17;
break;
case 6:return 'CONSOLE';
break;
case 7:return 61;
break;
case 8:return 63;
break;
case 9:return 64;
break;
case 10:return 67;
break;
case 11:return 68;
break;
case 12:return 'LOG';
break;
case 13:return 27;
break;
case 14:return 29;
break;
case 15:return 28;
break;
case 16:return 30;
break;
case 17:return 54;
break;
case 18:return 15;
break;
case 19:return 53;
break;
case 20:return 18;
break;
case 21:return 50;
break;
case 22:return 51;
break;
case 23:return 57;
break;
case 24:return 59;
break;
case 25:return 21;
break;
case 26:return 22;
break;
case 27:return 24;
break;
case 28:return 31;
break;
case 29:return 20;
break;
case 30:return 'POINT';
break;
case 31:return 44;
break;
case 32:return 47;
break;
case 33:return 46;
break;
case 34:return 48;
break;
case 35:return 49;
break;
case 36:return 'INCREMENTSIGN';
break;
case 37:return 'DECREMENTSIGN';
break;
case 38:return 45;
break;
case 39:return 55;
break;
case 40:return 37;
break;
case 41:return 38;
break;
case 42:return 39;
break;
case 43:return 40;
break;
case 44:return 41;
break;
case 45:return 42;
break;
case 46:return 33;
break;
case 47:return 32;
break;
case 48:return 34;
break;
case 49:this.begin("chain");
break;
case 50:return 52;
break;
case 51:this.popState();
break;
case 52:this.begin("chain_simp");
break;
case 53:return 52;
break;
case 54:this.popState();
break;
case 55:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]+)/,/^(?:\/\*(\*(?!\/)|[^*])*\*\/)/,/^(?:let\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:console\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:log\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:(true|false))/,/^(?:([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)/,/^(?:[0-9]+\.?[0-9]*)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\.)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\+\+)/,/^(?:--)/,/^(?:%)/,/^(?:\?)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:["])/,/^(?:[^"\n]+)/,/^(?:["])/,/^(?:['])/,/^(?:[^'\n]+)/,/^(?:['])/,/^(?:$)/],
conditions: {"chain_simp":{"rules":[53,54],"inclusive":false},"chain":{"rules":[50,51],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}